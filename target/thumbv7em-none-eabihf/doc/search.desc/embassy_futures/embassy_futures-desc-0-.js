searchState.loadedDescShard("embassy_futures", 0, "embassy-futures\nRun a future to completion using a busy loop.\nWait for multiple futures to complete.\nPoll a future once.\nWait for the first of several futures to complete.\nYield from the current task once, allowing other tasks to …\nFuture for the <code>join</code> function.\nFuture for the <code>join3</code> function.\nFuture for the <code>join4</code> function.\nFuture for the <code>join5</code> function.\nFuture for the <code>join_array</code> function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJoins the result of two futures, waiting for them both to …\nJoins the result of three futures, waiting for them all to …\nJoins the result of four futures, waiting for them all to …\nJoins the result of five futures, waiting for them all to …\nJoins the result of an array of futures, waiting for them …\nResult for <code>select</code>.\nResult for <code>select3</code>.\nResult for <code>select4</code>.\nFirst future finished first.\nFirst future finished first.\nFirst future finished first.\nFourth future finished first.\nSecond future finished first.\nSecond future finished first.\nSecond future finished first.\nFuture for the <code>select</code> function.\nFuture for the <code>select3</code> function.\nFuture for the <code>select4</code> function.\nFuture for the <code>select_array</code> function.\nFuture for the <code>select_slice</code> function.\nThird future finished first.\nThird future finished first.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWait for one of two futures to complete.\nSame as <code>select</code>, but with more futures.\nSame as <code>select</code>, but with more futures.\nCreates a new future which will select over an array of …\nCreates a new future which will select over a slice of …")