searchState.loadedDescShard("microbit_bsp", 0, "microbit-bsp\nButton ‘A’\nConfiguration for peripherals. Default configuration …\nLED matrix peripheral for the micro:bit\nRepresents all the peripherals and pins available for the …\nThe interrupt priority level.\nAccelerometer for the micro:bit\nButton ‘A’\nButton ‘B’\nDCDC configuration.\nEnable or disable the debug port.\nDriver a NxM LED matrix display\nLED matrix display\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGPIOTE interrupt priority. Should be lower priority than …\nHigh frequency clock source.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLow frequency clock source.\nmicrphone peripheral\nMicrophone pin enable\nMicrophone pin\nCreate a new instance based on HAL configuration\nP1 connector pin\nP12 connector pin\nP13 connector pin\nP14 connector pin\nP15 connector pin\nP16 connector pin\nP17 connector pin\nP19 connector pin\nP2 connector pin\nP20 connector pin\nP22 connector pin\nP23 connector pin\nP25 connector pin\nP8 connector pin\nP9 connector pin\nPPI channel 0\nPPI channel 1\nPWM0 peripheral\nRandom number generator\nAnalog digital converter\nSimple speaker utilities for PWM-based synth\nSpeaker pin\nTime driver interrupt priority. Should be lower priority …\nTIMER0 peripheral\nSPI/I2C peripheral\nUART0 peripheral\nWatchdog Timer (WDT) driver.\nAccelerometer output data rate\nAccelerometer peripheral present on the microbit\nI²C / SPI communication error\nAccelerometer error\n1 Hz (all modes)\n10 Hz all modes)\n100 Hz (all modes)\n200 Hz (all modes)\n25 Hz (all modes)\n400 Hz (all modes)\n50 Hz (all modes)\nInvalid input data provided\n1.344 kHz (only normal and high-resolution modes)\n1.620 kHz (only low-power mode)\n5.376 kHz (only low-power mode)\nChip-select pin error (SPI)\nReturn accelerometer data\nReturn status of accelerometer\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>AccelOutputDataRate</code> with the given frequency in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate and initialize the accelerometer\nRun a continuous task outputing accelerometer data at the …\nAn effect filter to apply for an animation\nErrors produced when running animations\nA bitmap with room for 8 bits used by Frame to create a …\nA brightness setting for the display.\nAn NxM frame that can be displayed on a LED matrix.\nLed matrix driver supporting arbitrary sized led matrixes.\nMaximum brightness\nLowest brightness\nNo effect\nSliding effect\nAnimation scroll is too fast to keep up with the refresh …\nLogical AND with another bitmap\nLogical AND with another frame\nApply animation based on data with the given effect during …\nAnimate a slice of frames using the provided effect during …\nApply the provided frame onto the frame buffer\nClear all LEDs\nClear bit n in bitmap\nClear this frame (empty)\nClear all bits in bitmap\nDecrease brightness relative to current setting\nDisplay the provided frame for the duration. Handles …\nCreate an empty bitmap with nbits bits\nCreate an empty frame\nBitmaps and fonts for the micro:bit\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncrease brightness relative to current setting\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if bit n is set in bitmap\nCheck if (x, y) is set on this frame\nReturn the level value\nCreate a new instance of an LED matrix using the provided …\nCreate a new bitmap with initial input and number of bits\nCreate a frame from a bitmap array\nCreate a new brightness with a custom level\nTurn off point (x,y) in the frame buffer\nTurn on point (x,y) in the frame buffer\nLogical OR with another bitmap\nLogical OR with another frame\nPerform a full refresh of the display based on the current …\nScroll the provided text across the LED display using …\nScroll the provided text across the screen within the …\nSet bit n in bitmap\nEnable (x, y) on this frame\nAdjust the brightness level\nShift left by nbits bits\nShift all rows left\nShift right by nbits bits\nShift all rows right\nDisable (x, y) on this frame\nA left arrow bitmap\nA right arrow bitmap\nA check-mark bitmap\nA cross-mark bitmap\nConstruct a 5x5 frame from a byte slice\nMicrophone interface\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new microphone instance\nEnable the microphone and return the sound level as …\nHz\nPitch for standard scale\nA note is a pitch + a duration (ms)\nRepresents any pitch\nPWM based speaker capable of playing notes with a given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurn into Hz\nCreate a new speaker instance\nPlay a note\nPlay a note, blocking variant.\nWDT configuration.\nWatchdog driver.\nWatchdog handle.\nIs the watchdog still awaiting pets from any handle?\nDisable the watchdog interrupt.\nEnable the watchdog interrupt.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHas this handle been pet within the current window?\nPet the watchdog.\nShould the watchdog continue to count when the CPU is …\nShould the watchdog continue to count during sleep modes?\nSteal a watchdog handle by index.\nNumber of 32768 Hz ticks in each watchdog period.\nCreate a config structure from the current configuration …\nTry to create a new watchdog driver.")