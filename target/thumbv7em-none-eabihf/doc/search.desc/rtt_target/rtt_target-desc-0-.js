searchState.loadedDescShard("rtt_target", 0, "Target side implementation of the RTT (Real-Time Transfer) …\nBlock (spin) if the buffer is full. If within a critical …\nSpecifies what to do when a channel doesn’t have enough …\nRTT down (host to target) channel\nSkip writing the data completely if it doesn’t fit in …\nWrite as much as possible of the data and ignore the rest.\nAn up channel that supports writing into multiple virtual …\nFormatted writing operation. Don’t store an instance of …\nRTT up (target to host) channel\nMagically creates a channel out of thin air. Return <code>None</code> …\nThe same as [<code>rprint</code>] macro but works only in debug\nThe same as [<code>rprintln</code>] macro but works only in debug\nThe same as <code>rtt_init</code> macro but works only in debug\nThe same as <code>rtt_init_default</code> macro but works only in debug\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the channel into a virtual terminal that can be …\nGets the current blocking mode of the channel. The default …\nGets the current blocking mode of the channel. The default …\nPrint to RTT and return the value of a given expression …\nPrint to RTT and return the value of a given expression …\nReads up to <code>buf.len()</code> bytes from the channel and return …\nPrints to the print RTT channel. Works just like the …\nPrints to the print RTT channel. Works just like the …\nPrints to the print RTT channel, with a newline. Works …\nPrints to the print RTT channel, with a newline. Works …\nInitializes RTT with the specified channels. Channel …\nInitializes RTT with default up/down channels.\nInitializes RTT with a single up channel and sets it as …\nInitializes RTT with a single up channel and sets it as …\nSets the blocking mode of the channel\nSets the blocking mode of the channel\nSets the channel to use for [<code>rprint</code>], [<code>rprintln</code>], […\nCreates a writer for formatted writing with ufmt.\nWriter for ufmt. Don’t store an instance of this, but …\nWrites <code>buf</code> to the channel and returns the number of bytes …\nCreates a writer to write a message to the virtual …")