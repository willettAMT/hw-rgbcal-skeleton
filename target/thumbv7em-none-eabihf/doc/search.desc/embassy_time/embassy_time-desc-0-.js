searchState.loadedDescShard("embassy_time", 0, "embassy-time\nType implementing async delays and blocking <code>embedded-hal</code> …\nRepresents the difference between two Instants\nAn Instant in time, based on the MCU’s clock ticks since …\nThe largest value that can be represented by the <code>Duration</code> …\nThe largest (latest) value that can be represented by the …\nThe smallest value that can be represented by the <code>Duration</code> …\nThe smallest (earliest) value that can be represented by …\nOutput type of the future.\nTicks per second of the global timebase.\nAsynchronous stream that yields every Duration, …\nError returned by <code>with_timeout</code> and <code>with_deadline</code> on …\nA future that completes at a specified Instant.\nProvides functions to run a given future with a timeout or …\nExpire after specified Duration. This can be used as a …\nExpire after the specified number of microseconds.\nExpire after the specified number of milliseconds.\nExpire after the specified number of nanoseconds.\nExpire after the specified number of seconds.\nExpire after the specified number of ticks.\nConvert the <code>Duration</code> to microseconds, rounding down.\nMicroseconds since system boot.\nConvert the <code>Duration</code> to milliseconds, rounding down.\nMilliseconds since system boot.\nConvert the <code>Duration</code> to seconds, rounding down.\nSeconds since system boot.\nTick count of the <code>Duration</code>.\nTick count since system boot.\nExpire at specified Instant\nBlocks for at least <code>duration</code>.\nAdds one Duration to another, returning a new Duration or …\nAdds one Duration to self, returning a new <code>Instant</code> or None …\nDivides one Duration a scalar u32, returning a new …\nDuration between this Instant and another Instant\nMultiplies one Duration by a scalar u32, returning a new …\nSubtracts one Duration to another, returning a new …\nSubtracts one Duration to self, returning a new <code>Instant</code> or …\nDuration between this Instant and another Instant Panics …\nDuration elapsed since this Instant.\nCreates a new ticker that ticks at the specified duration …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a duration corresponding to the specified Hz. …\nCreates a duration from the specified number of …\nCreate an Instant from a microsecond count since system …\nCreates a duration from the specified number of …\nCreates a duration from the specified number of …\nCreate an Instant from a millisecond count since system …\nCreates a duration from the specified number of …\nCreates a duration from the specified number of …\nCreates a duration from the specified number of seconds, …\nCreate an Instant from a second count since system boot.\nCreates a duration from the specified number of seconds, …\nCreates a duration from the specified number of clock ticks\nCreate an Instant from a tick count since system boot.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWaits for the next tick.\nReturns an Instant representing the current time.\nResets the ticker back to its original state. This causes …\nResets the ticker, after the specified duration has passed.\nReset the ticker at the deadline. If the deadline is in …\nReturns the duration since the “earlier” Instant. If …\nConverts using <code>Duration::from_micros</code>. Fails if value can …\nRuns a given future with a deadline time.\nRuns a given future with a deadline time.\nRuns a given future with a timeout.\nRuns a given future with a timeout.")