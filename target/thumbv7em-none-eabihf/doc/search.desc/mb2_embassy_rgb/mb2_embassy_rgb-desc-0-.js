searchState.loadedDescShard("mb2_embassy_rgb", 0, "RGB LED controller with dynamic frame rate and PWM …\nCurrent frame rate for change detection and dynamic …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCached RGB intensity levels to minimize shared state …\nRGB LED Control Module\nGPIO pins controlling the RGB LEDs [red, green, blue].\nPre-calculated timing value for PWM generation (in …\nRGB LED controller with dynamic frame rate and PWM …\nType alias for the RGB LED pin array.\nCurrent frame rate for change detection and dynamic …\nCalculates the PWM tick time in microseconds for a given …\nCached RGB intensity levels to minimize shared state …\nCreates a new RGB controller instance with specified pins …\nGPIO pins controlling the RGB LEDs [red, green, blue].\nMain RGB control loop with dynamic frame rate and …\nExecutes one PWM cycle for a single LED.\nPre-calculated timing value for PWM generation (in …\nRepresents which parameter the knob is currently …\nInternal state for th e UI control system.\nDisplay refresh rate in frames per second 910-160 FPS).\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRGB intensity levels [red, green, blue] with values from …\nMap knob value (0-15) to appropriate parameter value\nRead the current button state and determine which …\nMain UI control loop that handles input processing and …\nDisplays the current UI state to the debug console.")