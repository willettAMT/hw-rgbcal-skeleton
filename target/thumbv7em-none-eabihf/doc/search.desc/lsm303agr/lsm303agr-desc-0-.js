searchState.loadedDescShard("lsm303agr", 0, "This is a platform agnostic Rust driver for the LSM303AGR …\nAccelerometer mode\nAccelerometer output data rate\nAccelerometer scaling factor\nAn acceleration measurement.\nAn Accelerometer ID.\nAOI1 interrupt on INT1 pin.\nAOI2 interrupt on INT1 pin.\nBypass mode\nCLICK interrupt on INT1 pin.\nI²C / SPI communication error\nDRDY1 interrupt on INT1 pin.\nDRDY2 interrupt on INT1 pin.\nAll possible errors in this crate\nFIFO mode\nA FIFO mode.\nFIFO overrun interrupt on INT1 pin.\nFIFO watermark interrupt on INT1 pin.\nPlus or minus 16g\nPlus or minus 2g\nPlus or minus 4g\nPlus or minus 8g\nHigh resolution (12-bit)\nHigh resolution mode\n1 Hz (all modes)\n10 Hz all modes)\n10 Hz\n100 Hz (all modes)\n100 Hz\n20 Hz\n200 Hz (all modes)\n25 Hz (all modes)\n400 Hz (all modes)\n50 Hz (all modes)\n50 Hz\nAn interrupt.\nInvalid input data provided\n1.344 kHz (only normal and high-resolution modes)\n1.620 kHz (only low-power mode)\n5.376 kHz (only low-power mode)\nLow power (8-bit)\nLow-power mode\nLSM303AGR device driver\nMagnetometer mode\nMagnetometer output data rate\nA magnetic field measurement.\nA Magnetometer ID.\nAll possible errors in this crate\nNormal mode (10-bit)\nChip-select pin error (SPI)\nPower down\nData status\nStream mode\nStream-to-FIFO mode\nA temperature measurement.\nTemperature sensor status\nDisable accelerometer interrupt.\nEnable accelerometer interrupt.\nSet the accelerometer FIFO mode and full threshold.\nAccelerometer status\nGet measured acceleration.\nGet the accelerometer device ID.\nTemperature in °C.\nDestroy driver instance, return SPI bus instance and chip …\nDestroy driver instance, return I2C bus.\nOriginal device without mode changed\nDisable the magnetometer’s built in offset cancellation.\nDisable the magnetometer’s built in offset cancellation.\nEnable the magnetometer’s built in offset cancellation.\nEnable the magnetometer’s built in offset cancellation.\nI²C / SPI communication error\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>AccelOutputDataRate</code> with the given frequency in …\nCreate an <code>MagOutputDataRate</code> with the given frequency in …\nGet the accelerometer mode\nGet accelerometer scaling factor\nGet magnetometer power/resolution mode.\nInitialize registers\nI2C/SPI interfaces\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChange the magnetometer to continuous measurement mode\nChange the magnetometer to one-shot mode\nCheck if the ID corresponds to the expected value.\nCheck if the ID corresponds to the expected value.\nDisable magnetometer low-pass filter.\nConfigure the DRDY pin as a digital output.\nEnable magnetometer low-pass filter.\nMagnetometer status\nGet the measured magnetic field.\nGet the measured magnetic field.\nGet the magnetometer device ID.\nDevice operation modes\nTemperature new data available.\nCreate new instance of the LSM303AGR device communicating …\nCreate new instance of the LSM303AGR device communicating …\nTemperature data overrun.\nRaw accelerometer ID.\nRaw magnetometer ID.\nRaw temperature.\nSet accelerometer power/resolution mode and output data …\nSet accelerometer scaling factor\nSet magnetometer power/resolution mode and output data …\nGet measured temperature.\nTemperature sensor status\nUnscaled temperature.\nAcceleration in X-direction in m<em>g</em> (milli-<em>g</em>).\nX-axis new data available.\nMagnetic field in X-direction in nT (nano-Tesla).\nX-axis data overrun.\nRaw acceleration in X-direction.\nRaw magnetic field in X-direction.\nUnscaled acceleration in X-direction.\nUnscaled magnetic field in X-direction.\nAcceleration in X-, Y- and Z-directions in m<em>g</em> (milli-<em>g</em>).\nX-, Y- and Z-axis new data available.\nMagnetic field in X-, Y- and Z-directions in nT …\nX-, Y- and Z-axis data overrun.\nRaw acceleration in X-, Y- and Z-directions.\nRaw magnetic field in X-, Y- and Z-directions.\nUnscaled acceleration in X-, Y- and Z-directions.\nUnscaled magnetic field in X-, Y- and Z-directions.\nAcceleration in Y-direction in m<em>g</em> (milli-<em>g</em>).\nY-axis new data available.\nMagnetic field in Y-direction in nT (nano-Tesla).\nY-axis data overrun.\nRaw acceleration in Y-direction.\nRaw magnetic field in Y-direction.\nUnscaled acceleration in Y-direction.\nUnscaled magnetic field in Y-direction.\nAcceleration in Z-direction in m<em>g</em> (milli-<em>g</em>).\nZ-axis new data available.\nMagnetic field in Z-direction in nT (nano-Tesla).\nZ-axis data overrun.\nRaw acceleration in Z-direction.\nRaw magnetic field in Z-direction.\nUnscaled acceleration in Z-direction.\nUnscaled magnetic field in Z-direction.\nError type\nError type\nI2C interface\nRead data\nSPI interface\nWrite data\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead 3 u16 accelerometer registers\nRead an u16 accelerometer register\nRead an u8 accelerometer register\nRead 3 u16 magnetometer registers\nRead an u8 magnetometer register\nWrite to an u8 accelerometer register\nWrite to an u8 magnetometer register\nMarker type for magnetometer in continuous mode.\nMarker type for magnetometer in one-shot (single) mode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")