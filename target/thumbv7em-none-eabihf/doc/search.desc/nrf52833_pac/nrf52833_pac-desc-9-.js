searchState.loadedDescShard("nrf52833_pac", 9, "Event not generated\nGet enumerated values variant\nEnd of TXD buffer reached\nField <code>EVENTS_ENDTX</code> reader - End of TXD buffer reached\nEnd of TXD buffer reached\nField <code>EVENTS_ENDTX</code> writer - End of TXD buffer reached\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_ENDTX</code> reader\nRegister <code>EVENTS_ENDTX</code> writer\nWrites raw bits to the register.\nBit 0 - End of TXD buffer reached\nBit 0 - End of TXD buffer reached\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nTransaction started\nField <code>EVENTS_STARTED</code> reader - Transaction started\nTransaction started\nField <code>EVENTS_STARTED</code> writer - Transaction started\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_STARTED</code> reader\nRegister <code>EVENTS_STARTED</code> writer\nWrites raw bits to the register.\nBit 0 - Transaction started\nBit 0 - Transaction started\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nSPI transaction has stopped\nField <code>EVENTS_STOPPED</code> reader - SPI transaction has stopped\nSPI transaction has stopped\nField <code>EVENTS_STOPPED</code> writer - SPI transaction has stopped\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_STOPPED</code> reader\nRegister <code>EVENTS_STOPPED</code> writer\nWrites raw bits to the register.\nBit 0 - SPI transaction has stopped\nBit 0 - SPI transaction has stopped\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nSPI master data rate\nField <code>FREQUENCY</code> reader - SPI master data rate\nSPI frequency. Accuracy depends on the HFCLK source …\nField <code>FREQUENCY</code> writer - SPI master data rate\n33554432: 125 kbps\n67108864: 250 kbps\n134217728: 500 kbps\n268435456: 1 Mbps\n167772160: 16 Mbps\n536870912: 2 Mbps\n335544320: 32 Mbps\n1073741824: 4 Mbps\n2147483648: 8 Mbps\nRegister <code>FREQUENCY</code> reader\nRegister <code>FREQUENCY</code> writer\nWrites raw bits to the register.\nBits 0:31 - SPI master data rate\nBits 0:31 - SPI master data rate\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>K125</code>\nChecks if the value of the field is <code>K250</code>\nChecks if the value of the field is <code>K500</code>\nChecks if the value of the field is <code>M1</code>\nChecks if the value of the field is <code>M16</code>\nChecks if the value of the field is <code>M2</code>\nChecks if the value of the field is <code>M32</code>\nChecks if the value of the field is <code>M4</code>\nChecks if the value of the field is <code>M8</code>\n125 kbps\n250 kbps\n500 kbps\n1 Mbps\n16 Mbps\n2 Mbps\n32 Mbps\n4 Mbps\n8 Mbps\nGet enumerated values variant\nCSNDUR (rw) register accessor: an alias for …\nRegister block\nRXDELAY (rw) register accessor: an alias for …\nMinimum duration between edge of CSN and edge of SCK and …\n0x04 - Minimum duration between edge of CSN and edge of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSample delay for input serial data on MISO\n0x00 - Sample delay for input serial data on MISO\nField <code>CSNDUR</code> reader - Minimum duration between edge of CSN …\nMinimum duration between edge of CSN and edge of SCK and …\nField <code>CSNDUR</code> writer - Minimum duration between edge of CSN …\nRegister <code>CSNDUR</code> reader\nRegister <code>CSNDUR</code> writer\nWrites raw bits to the register.\nBits 0:7 - Minimum duration between edge of CSN and edge …\nBits 0:7 - Minimum duration between edge of CSN and edge …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegister <code>RXDELAY</code> reader\nField <code>RXDELAY</code> reader - Sample delay for input serial data …\nSample delay for input serial data on MISO\nField <code>RXDELAY</code> writer - Sample delay for input serial data …\nRegister <code>RXDELAY</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:2 - Sample delay for input serial data on MISO. The …\nBits 0:2 - Sample delay for input serial data on MISO. The …\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nWrite ‘1’ to disable interrupt for event ENDRX\nWrite ‘1’ to disable interrupt for event ENDRX\nField <code>ENDRX</code> reader - Write ‘1’ to disable interrupt …\nField <code>ENDRX</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for event ENDTX\nWrite ‘1’ to disable interrupt for event ENDTX\nField <code>ENDTX</code> reader - Write ‘1’ to disable interrupt …\nField <code>ENDTX</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for event END\nWrite ‘1’ to disable interrupt for event END\nField <code>END</code> reader - Write ‘1’ to disable interrupt for …\nField <code>END</code> writer - Write ‘1’ to disable interrupt for …\nDisable interrupt\nRegister <code>INTENCLR</code> reader\nWrite ‘1’ to disable interrupt for event STARTED\nWrite ‘1’ to disable interrupt for event STARTED\nField <code>STARTED</code> reader - Write ‘1’ to disable interrupt …\nField <code>STARTED</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for event STOPPED\nWrite ‘1’ to disable interrupt for event STOPPED\nField <code>STOPPED</code> reader - Write ‘1’ to disable interrupt …\nField <code>STOPPED</code> writer - Write ‘1’ to disable interrupt …\nRegister <code>INTENCLR</code> writer\nWrites raw bits to the register.\nDisable\nDisable\nDisable\nDisable\nDisable\nBit 6 - Write ‘1’ to disable interrupt for event END\nBit 6 - Write ‘1’ to disable interrupt for event END\nBit 4 - Write ‘1’ to disable interrupt for event ENDRX\nBit 4 - Write ‘1’ to disable interrupt for event ENDRX\nBit 8 - Write ‘1’ to disable interrupt for event ENDTX\nBit 8 - Write ‘1’ to disable interrupt for event ENDTX\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 19 - Write ‘1’ to disable interrupt for event …\nBit 19 - Write ‘1’ to disable interrupt for event …\nBit 1 - Write ‘1’ to disable interrupt for event …\nBit 1 - Write ‘1’ to disable interrupt for event …\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nWrite ‘1’ to enable interrupt for event ENDRX\nWrite ‘1’ to enable interrupt for event ENDRX\nField <code>ENDRX</code> reader - Write ‘1’ to enable interrupt for …\nField <code>ENDRX</code> writer - Write ‘1’ to enable interrupt for …\nWrite ‘1’ to enable interrupt for event ENDTX\nWrite ‘1’ to enable interrupt for event ENDTX\nField <code>ENDTX</code> reader - Write ‘1’ to enable interrupt for …\nField <code>ENDTX</code> writer - Write ‘1’ to enable interrupt for …\nWrite ‘1’ to enable interrupt for event END\nWrite ‘1’ to enable interrupt for event END\nField <code>END</code> reader - Write ‘1’ to enable interrupt for …\nField <code>END</code> writer - Write ‘1’ to enable interrupt for …\nEnable interrupt\nRegister <code>INTENSET</code> reader\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\nWrite ‘1’ to enable interrupt for event STARTED\nWrite ‘1’ to enable interrupt for event STARTED\nField <code>STARTED</code> reader - Write ‘1’ to enable interrupt …\nField <code>STARTED</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for event STOPPED\nWrite ‘1’ to enable interrupt for event STOPPED\nField <code>STOPPED</code> reader - Write ‘1’ to enable interrupt …\nField <code>STOPPED</code> writer - Write ‘1’ to enable interrupt …\nRegister <code>INTENSET</code> writer\nWrites raw bits to the register.\nBit 6 - Write ‘1’ to enable interrupt for event END\nBit 6 - Write ‘1’ to enable interrupt for event END\nBit 4 - Write ‘1’ to enable interrupt for event ENDRX\nBit 4 - Write ‘1’ to enable interrupt for event ENDRX\nBit 8 - Write ‘1’ to enable interrupt for event ENDTX\nBit 8 - Write ‘1’ to enable interrupt for event ENDTX\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nEnable\nEnable\nEnable\nEnable\nEnable\nBit 19 - Write ‘1’ to enable interrupt for event …\nBit 19 - Write ‘1’ to enable interrupt for event …\nBit 1 - Write ‘1’ to enable interrupt for event STOPPED\nBit 1 - Write ‘1’ to enable interrupt for event STOPPED\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>ORC</code> reader - Byte transmitted after TXD.MAXCNT bytes …\nByte transmitted after TXD.MAXCNT bytes have been …\nField <code>ORC</code> writer - Byte transmitted after TXD.MAXCNT bytes …\nRegister <code>ORC</code> reader\nRegister <code>ORC</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:7 - Byte transmitted after TXD.MAXCNT bytes have …\nBits 0:7 - Byte transmitted after TXD.MAXCNT bytes have …\nCSN (rw) register accessor: an alias for <code>Reg&lt;CSN_SPEC&gt;</code>\nMISO (rw) register accessor: an alias for <code>Reg&lt;MISO_SPEC&gt;</code>\nMOSI (rw) register accessor: an alias for <code>Reg&lt;MOSI_SPEC&gt;</code>\nRegister block\nSCK (rw) register accessor: an alias for <code>Reg&lt;SCK_SPEC&gt;</code>\nPin select for CSN\n0x0c - Pin select for CSN\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPin select for MISO signal\n0x08 - Pin select for MISO signal\nPin select for MOSI signal\n0x04 - Pin select for MOSI signal\nPin select for SCK\n0x00 - Pin select for SCK\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\nPin select for CSN\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>CSN</code> reader\nRegister <code>CSN</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nPin select for MISO signal\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>MISO</code> reader\nRegister <code>MISO</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nPin select for MOSI signal\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>MOSI</code> reader\nRegister <code>MOSI</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>SCK</code> reader\nPin select for SCK\nRegister <code>SCK</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nPin select for DCX signal\nRegister <code>PSELDCX</code> reader\nRegister <code>PSELDCX</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\nAMOUNT (r) register accessor: an alias for <code>Reg&lt;AMOUNT_SPEC&gt;</code>\nLIST (rw) register accessor: an alias for <code>Reg&lt;LIST_SPEC&gt;</code>\nMAXCNT (rw) register accessor: an alias for …\nPTR (rw) register accessor: an alias for <code>Reg&lt;PTR_SPEC&gt;</code>\nRegister block\nNumber of bytes transferred in the last transaction\n0x08 - Number of bytes transferred in the last transaction\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEasyDMA list type\n0x0c - EasyDMA list type\nMaximum number of bytes in receive buffer\n0x04 - Maximum number of bytes in receive buffer\nData pointer\n0x00 - Data pointer\nField <code>AMOUNT</code> reader - Number of bytes transferred in the …\nNumber of bytes transferred in the last transaction\nRegister <code>AMOUNT</code> reader\nBits 0:15 - Number of bytes transferred in the last …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n1: Use array list\n0: Disable EasyDMA list\nList type\nField <code>LIST</code> reader - List type\nEasyDMA list type\nField <code>LIST</code> writer - List type\nRegister <code>LIST</code> reader\nRegister <code>LIST</code> writer\nUse array list\nWrites raw bits to the register.\nDisable EasyDMA list\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>ARRAY_LIST</code>\nChecks if the value of the field is <code>DISABLED</code>\nBits 0:1 - List type\nBits 0:1 - List type\nGet enumerated values variant\nField <code>MAXCNT</code> reader - Maximum number of bytes in receive …\nMaximum number of bytes in receive buffer\nField <code>MAXCNT</code> writer - Maximum number of bytes in receive …\nRegister <code>MAXCNT</code> reader\nRegister <code>MAXCNT</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:15 - Maximum number of bytes in receive buffer\nBits 0:15 - Maximum number of bytes in receive buffer\nField <code>PTR</code> reader - Data pointer\nData pointer\nField <code>PTR</code> writer - Data pointer\nRegister <code>PTR</code> reader\nRegister <code>PTR</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Data pointer\nBits 0:31 - Data pointer\n0: Disable shortcut\n1: Enable shortcut\nShortcut between event END and task START\nField <code>END_START</code> reader - Shortcut between event END and …\nField <code>END_START</code> writer - Shortcut between event END and …\nRegister <code>SHORTS</code> reader\nShortcuts between local events and tasks\nRegister <code>SHORTS</code> writer\nWrites raw bits to the register.\nDisable shortcut\nEnable shortcut\nBit 17 - Shortcut between event END and task START\nBit 17 - Shortcut between event END and task START\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\n0: No stall\n0: No stall\nRegister <code>STALLSTAT</code> reader\nStall status for EasyDMA RAM writes\nField <code>RX</code> reader - Stall status for EasyDMA RAM writes\nField <code>RX</code> writer - Stall status for EasyDMA RAM writes\n1: A stall has occurred\n1: A stall has occurred\nStall status for EasyDMA RAM accesses. The fields in this …\nStall status for EasyDMA RAM reads\nField <code>TX</code> reader - Stall status for EasyDMA RAM reads\nField <code>TX</code> writer - Stall status for EasyDMA RAM reads\nRegister <code>STALLSTAT</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>NOSTALL</code>\nChecks if the value of the field is <code>NOSTALL</code>\nChecks if the value of the field is <code>STALL</code>\nChecks if the value of the field is <code>STALL</code>\nNo stall\nNo stall\nBit 1 - Stall status for EasyDMA RAM writes\nBit 1 - Stall status for EasyDMA RAM writes\nA stall has occurred\nA stall has occurred\nBit 0 - Stall status for EasyDMA RAM reads\nBit 0 - Stall status for EasyDMA RAM reads\nGet enumerated values variant\nGet enumerated values variant\nResume SPI transaction\nResume SPI transaction\nField <code>TASKS_RESUME</code> writer - Resume SPI transaction\n1: Trigger task\nRegister <code>TASKS_RESUME</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Resume SPI transaction\nTrigger task\nStart SPI transaction\nStart SPI transaction\nField <code>TASKS_START</code> writer - Start SPI transaction\n1: Trigger task\nRegister <code>TASKS_START</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Start SPI transaction\nTrigger task\nStop SPI transaction\nStop SPI transaction\nField <code>TASKS_STOP</code> writer - Stop SPI transaction\n1: Trigger task\nRegister <code>TASKS_STOP</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Stop SPI transaction\nTrigger task\nSuspend SPI transaction\nSuspend SPI transaction\nField <code>TASKS_SUSPEND</code> writer - Suspend SPI transaction\n1: Trigger task\nRegister <code>TASKS_SUSPEND</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Suspend SPI transaction\nTrigger task\nAMOUNT (r) register accessor: an alias for <code>Reg&lt;AMOUNT_SPEC&gt;</code>\nLIST (rw) register accessor: an alias for <code>Reg&lt;LIST_SPEC&gt;</code>\nMAXCNT (rw) register accessor: an alias for …\nPTR (rw) register accessor: an alias for <code>Reg&lt;PTR_SPEC&gt;</code>\nRegister block\nNumber of bytes transferred in the last transaction\n0x08 - Number of bytes transferred in the last transaction\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEasyDMA list type\n0x0c - EasyDMA list type\nNumber of bytes in transmit buffer\n0x04 - Number of bytes in transmit buffer\nData pointer\n0x00 - Data pointer\nField <code>AMOUNT</code> reader - Number of bytes transferred in the …\nNumber of bytes transferred in the last transaction\nRegister <code>AMOUNT</code> reader\nBits 0:15 - Number of bytes transferred in the last …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n1: Use array list\n0: Disable EasyDMA list\nList type\nField <code>LIST</code> reader - List type\nEasyDMA list type\nField <code>LIST</code> writer - List type\nRegister <code>LIST</code> reader\nRegister <code>LIST</code> writer\nUse array list\nWrites raw bits to the register.\nDisable EasyDMA list\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>ARRAY_LIST</code>\nChecks if the value of the field is <code>DISABLED</code>\nBits 0:1 - List type\nBits 0:1 - List type\nGet enumerated values variant\nField <code>MAXCNT</code> reader - Maximum number of bytes in transmit …\nNumber of bytes in transmit buffer\nField <code>MAXCNT</code> writer - Maximum number of bytes in transmit …\nRegister <code>MAXCNT</code> reader\nRegister <code>MAXCNT</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:15 - Maximum number of bytes in transmit buffer\nBits 0:15 - Maximum number of bytes in transmit buffer\nField <code>PTR</code> reader - Data pointer\nData pointer\nField <code>PTR</code> writer - Data pointer\nRegister <code>PTR</code> reader\nRegister <code>PTR</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Data pointer\nBits 0:31 - Data pointer\nCONFIG (rw) register accessor: an alias for …\nDEF (rw) register accessor: an alias for <code>Reg&lt;DEF_SPEC&gt;</code>\nENABLE (rw) register accessor: an alias for …\nEVENTS_ACQUIRED (rw) register accessor: an alias for …\nEVENTS_END (rw) register accessor: an alias for …\nEVENTS_ENDRX (rw) register accessor: an alias for …\nINTENCLR (rw) register accessor: an alias for …\nINTENSET (rw) register accessor: an alias for …\nORC (rw) register accessor: an alias for <code>Reg&lt;ORC_SPEC&gt;</code>\nUnspecified\nUnspecified\nRegister block\nSEMSTAT (r) register accessor: an alias for …\nSHORTS (rw) register accessor: an alias for …\nSTATUS (rw) register accessor: an alias for …\nTASKS_ACQUIRE (w) register accessor: an alias for …\nTASKS_RELEASE (w) register accessor: an alias for …\nUnspecified\nConfiguration register\n0x554 - Configuration register\nDefault character. Character clocked out in case of an …\n0x55c - Default character. Character clocked out in case …\nEnable SPI slave\n0x500 - Enable SPI slave\nSemaphore acquired\n0x128 - Semaphore acquired\nGranted transaction completed\n0x104 - Granted transaction completed\nEnd of RXD buffer reached\n0x110 - End of RXD buffer reached\nReturns the argument unchanged.\nDisable interrupt\n0x308 - Disable interrupt\nEnable interrupt\n0x304 - Enable interrupt\nCalls <code>U::from(self)</code>.\nOver-read character\n0x5c0 - Over-read character\nCluster Unspecified\n0x508..0x518 - Unspecified\nCluster Unspecified\n0x534..0x544 - Unspecified\nSemaphore status register\n0x400 - Semaphore status register\nShortcuts between local events and tasks\n0x200 - Shortcuts between local events and tasks\nStatus from last transaction\n0x440 - Status from last transaction\nAcquire SPI semaphore\n0x24 - Acquire SPI semaphore\nRelease SPI semaphore, enabling the SPI slave to acquire it\n0x28 - Release SPI semaphore, enabling the SPI slave to …\nCluster Unspecified\n0x544..0x554 - Unspecified\n0: Active high\n1: Active low\nConfiguration register\nSerial clock (SCK) phase\nField <code>CPHA</code> reader - Serial clock (SCK) phase\nField <code>CPHA</code> writer - Serial clock (SCK) phase\nSerial clock (SCK) polarity\nField <code>CPOL</code> reader - Serial clock (SCK) polarity\nField <code>CPOL</code> writer - Serial clock (SCK) polarity\n0: Sample on leading edge of clock, shift serial data on …\n1: Least significant bit shifted out first\n0: Most significant bit shifted out first\nBit order\nField <code>ORDER</code> reader - Bit order\nField <code>ORDER</code> writer - Bit order\nRegister <code>CONFIG</code> reader\n1: Sample on trailing edge of clock, shift serial data on …\nRegister <code>CONFIG</code> writer\nActive high\nActive low\nWrites raw bits to the register.\nBit 1 - Serial clock (SCK) phase\nBit 1 - Serial clock (SCK) phase\nBit 2 - Serial clock (SCK) polarity\nBit 2 - Serial clock (SCK) polarity\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>ACTIVE_HIGH</code>\nChecks if the value of the field is <code>ACTIVE_LOW</code>\nChecks if the value of the field is <code>LEADING</code>\nChecks if the value of the field is <code>LSB_FIRST</code>\nChecks if the value of the field is <code>MSB_FIRST</code>\nChecks if the value of the field is <code>TRAILING</code>\nSample on leading edge of clock, shift serial data on …\nLeast significant bit shifted out first\nMost significant bit shifted out first\nBit 0 - Bit order\nBit 0 - Bit order\nSample on trailing edge of clock, shift serial data on …\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>DEF</code> reader - Default character. Character clocked …\nDefault character. Character clocked out in case of an …\nField <code>DEF</code> writer - Default character. Character clocked …\nRegister <code>DEF</code> reader\nRegister <code>DEF</code> writer\nWrites raw bits to the register.\nBits 0:7 - Default character. Character clocked out in …\nBits 0:7 - Default character. Character clocked out in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n0: Disable SPI slave\n2: Enable SPI slave\nEnable or disable SPI slave\nField <code>ENABLE</code> reader - Enable or disable SPI slave\nEnable SPI slave\nField <code>ENABLE</code> writer - Enable or disable SPI slave\nRegister <code>ENABLE</code> reader\nRegister <code>ENABLE</code> writer\nWrites raw bits to the register.\nDisable SPI slave\nBits 0:3 - Enable or disable SPI slave\nBits 0:3 - Enable or disable SPI slave\nEnable SPI slave\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\nSemaphore acquired\nField <code>EVENTS_ACQUIRED</code> reader - Semaphore acquired\nSemaphore acquired\nField <code>EVENTS_ACQUIRED</code> writer - Semaphore acquired\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_ACQUIRED</code> reader\nRegister <code>EVENTS_ACQUIRED</code> writer\nWrites raw bits to the register.\nBit 0 - Semaphore acquired\nBit 0 - Semaphore acquired\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nGranted transaction completed\nField <code>EVENTS_END</code> reader - Granted transaction completed\nGranted transaction completed\nField <code>EVENTS_END</code> writer - Granted transaction completed\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_END</code> reader\nRegister <code>EVENTS_END</code> writer\nWrites raw bits to the register.\nBit 0 - Granted transaction completed\nBit 0 - Granted transaction completed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nEnd of RXD buffer reached\nField <code>EVENTS_ENDRX</code> reader - End of RXD buffer reached\nEnd of RXD buffer reached\nField <code>EVENTS_ENDRX</code> writer - End of RXD buffer reached\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_ENDRX</code> reader\nRegister <code>EVENTS_ENDRX</code> writer\nWrites raw bits to the register.\nBit 0 - End of RXD buffer reached\nBit 0 - End of RXD buffer reached\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nWrite ‘1’ to disable interrupt for event ACQUIRED\nWrite ‘1’ to disable interrupt for event ACQUIRED\nField <code>ACQUIRED</code> reader - Write ‘1’ to disable interrupt …\nField <code>ACQUIRED</code> writer - Write ‘1’ to disable interrupt …\n1: Disable\n1: Disable\n1: Disable\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nWrite ‘1’ to disable interrupt for event ENDRX\nWrite ‘1’ to disable interrupt for event ENDRX\nField <code>ENDRX</code> reader - Write ‘1’ to disable interrupt …\nField <code>ENDRX</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for event END\nWrite ‘1’ to disable interrupt for event END\nField <code>END</code> reader - Write ‘1’ to disable interrupt for …\nField <code>END</code> writer - Write ‘1’ to disable interrupt for …\nDisable interrupt\nRegister <code>INTENCLR</code> reader\nRegister <code>INTENCLR</code> writer\nBit 10 - Write ‘1’ to disable interrupt for event …\nBit 10 - Write ‘1’ to disable interrupt for event …\nWrites raw bits to the register.\nDisable\nDisable\nDisable\nBit 1 - Write ‘1’ to disable interrupt for event END\nBit 1 - Write ‘1’ to disable interrupt for event END\nBit 4 - Write ‘1’ to disable interrupt for event ENDRX\nBit 4 - Write ‘1’ to disable interrupt for event ENDRX\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nWrite ‘1’ to enable interrupt for event ACQUIRED\nWrite ‘1’ to enable interrupt for event ACQUIRED\nField <code>ACQUIRED</code> reader - Write ‘1’ to enable interrupt …\nField <code>ACQUIRED</code> writer - Write ‘1’ to enable interrupt …\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nWrite ‘1’ to enable interrupt for event ENDRX\nWrite ‘1’ to enable interrupt for event ENDRX\nField <code>ENDRX</code> reader - Write ‘1’ to enable interrupt for …\nField <code>ENDRX</code> writer - Write ‘1’ to enable interrupt for …\nWrite ‘1’ to enable interrupt for event END\nWrite ‘1’ to enable interrupt for event END\nField <code>END</code> reader - Write ‘1’ to enable interrupt for …\nField <code>END</code> writer - Write ‘1’ to enable interrupt for …\nEnable interrupt\nRegister <code>INTENSET</code> reader\n1: Enable\n1: Enable\n1: Enable\nRegister <code>INTENSET</code> writer\nBit 10 - Write ‘1’ to enable interrupt for event …\nBit 10 - Write ‘1’ to enable interrupt for event …\nWrites raw bits to the register.\nBit 1 - Write ‘1’ to enable interrupt for event END\nBit 1 - Write ‘1’ to enable interrupt for event END\nBit 4 - Write ‘1’ to enable interrupt for event ENDRX\nBit 4 - Write ‘1’ to enable interrupt for event ENDRX\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nEnable\nEnable\nEnable\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>ORC</code> reader - Over-read character. Character clocked …\nOver-read character\nField <code>ORC</code> writer - Over-read character. Character clocked …\nRegister <code>ORC</code> reader\nRegister <code>ORC</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:7 - Over-read character. Character clocked out …\nBits 0:7 - Over-read character. Character clocked out …\nCSN (rw) register accessor: an alias for <code>Reg&lt;CSN_SPEC&gt;</code>\nMISO (rw) register accessor: an alias for <code>Reg&lt;MISO_SPEC&gt;</code>\nMOSI (rw) register accessor: an alias for <code>Reg&lt;MOSI_SPEC&gt;</code>\nRegister block\nSCK (rw) register accessor: an alias for <code>Reg&lt;SCK_SPEC&gt;</code>\nPin select for CSN signal\n0x0c - Pin select for CSN signal\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPin select for MISO signal\n0x04 - Pin select for MISO signal\nPin select for MOSI signal\n0x08 - Pin select for MOSI signal\nPin select for SCK\n0x00 - Pin select for SCK\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\nPin select for CSN signal\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>CSN</code> reader\nRegister <code>CSN</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nPin select for MISO signal\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>MISO</code> reader\nRegister <code>MISO</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nPin select for MOSI signal\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>MOSI</code> reader\nRegister <code>MOSI</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>SCK</code> reader\nPin select for SCK\nRegister <code>SCK</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\nAMOUNT (r) register accessor: an alias for <code>Reg&lt;AMOUNT_SPEC&gt;</code>\nLIST (rw) register accessor: an alias for <code>Reg&lt;LIST_SPEC&gt;</code>\nMAXCNT (rw) register accessor: an alias for …\nPTR (rw) register accessor: an alias for <code>Reg&lt;PTR_SPEC&gt;</code>\nRegister block\nNumber of bytes received in last granted transaction\n0x08 - Number of bytes received in last granted transaction\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEasyDMA list type\n0x0c - EasyDMA list type\nMaximum number of bytes in receive buffer\n0x04 - Maximum number of bytes in receive buffer\nRXD data pointer\n0x00 - RXD data pointer\nField <code>AMOUNT</code> reader - Number of bytes received in the last …\nNumber of bytes received in last granted transaction\nRegister <code>AMOUNT</code> reader\nBits 0:15 - Number of bytes received in the last granted …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n1: Use array list\n0: Disable EasyDMA list\nList type\nField <code>LIST</code> reader - List type\nEasyDMA list type\nField <code>LIST</code> writer - List type\nRegister <code>LIST</code> reader\nRegister <code>LIST</code> writer\nUse array list\nWrites raw bits to the register.\nDisable EasyDMA list\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>ARRAY_LIST</code>\nChecks if the value of the field is <code>DISABLED</code>\nBits 0:1 - List type\nBits 0:1 - List type\nGet enumerated values variant\nField <code>MAXCNT</code> reader - Maximum number of bytes in receive …\nMaximum number of bytes in receive buffer\nField <code>MAXCNT</code> writer - Maximum number of bytes in receive …\nRegister <code>MAXCNT</code> reader\nRegister <code>MAXCNT</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:15 - Maximum number of bytes in receive buffer\nBits 0:15 - Maximum number of bytes in receive buffer\nField <code>PTR</code> reader - RXD data pointer\nRXD data pointer\nField <code>PTR</code> writer - RXD data pointer\nRegister <code>PTR</code> reader\nRegister <code>PTR</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - RXD data pointer\nBits 0:31 - RXD data pointer\n1: Semaphore is assigned to CPU\n3: Semaphore is assigned to SPI but a handover to the CPU …\n0: Semaphore is free\nRegister <code>SEMSTAT</code> reader\nSemaphore status\nField <code>SEMSTAT</code> reader - Semaphore status\nSemaphore status register\n2: Semaphore is assigned to SPI slave\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CPU</code>\nChecks if the value of the field is <code>CPUPENDING</code>\nChecks if the value of the field is <code>FREE</code>\nChecks if the value of the field is <code>SPIS</code>\nBits 0:1 - Semaphore status\nGet enumerated values variant\n0: Disable shortcut\n1: Enable shortcut\nShortcut between event END and task ACQUIRE\nField <code>END_ACQUIRE</code> reader - Shortcut between event END and …\nField <code>END_ACQUIRE</code> writer - Shortcut between event END and …\nRegister <code>SHORTS</code> reader\nShortcuts between local events and tasks\nRegister <code>SHORTS</code> writer\nWrites raw bits to the register.\nDisable shortcut\nEnable shortcut\nBit 2 - Shortcut between event END and task ACQUIRE\nBit 2 - Shortcut between event END and task ACQUIRE\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\n1: Write: clear error on writing ‘1’\n1: Write: clear error on writing ‘1’\n0: Read: error not present\n0: Read: error not present\nRX buffer overflow detected, and prevented\nRX buffer overflow detected, and prevented\nField <code>OVERFLOW</code> reader - RX buffer overflow detected, and …\nField <code>OVERFLOW</code> writer - RX buffer overflow detected, and …\nTX buffer over-read detected, and prevented\nTX buffer over-read detected, and prevented\nField <code>OVERREAD</code> reader - TX buffer over-read detected, and …\nField <code>OVERREAD</code> writer - TX buffer over-read detected, and …\n1: Read: error present\n1: Read: error present\nRegister <code>STATUS</code> reader\nStatus from last transaction\nRegister <code>STATUS</code> writer\nWrites raw bits to the register.\nWrite: clear error on writing ‘1’\nWrite: clear error on writing ‘1’\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>NOT_PRESENT</code>\nChecks if the value of the field is <code>NOT_PRESENT</code>\nChecks if the value of the field is <code>PRESENT</code>\nChecks if the value of the field is <code>PRESENT</code>\nBit 1 - RX buffer overflow detected, and prevented\nBit 1 - RX buffer overflow detected, and prevented\nBit 0 - TX buffer over-read detected, and prevented\nBit 0 - TX buffer over-read detected, and prevented\nGet enumerated values variant\nGet enumerated values variant\nAcquire SPI semaphore\nAcquire SPI semaphore\nField <code>TASKS_ACQUIRE</code> writer - Acquire SPI semaphore\n1: Trigger task\nRegister <code>TASKS_ACQUIRE</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Acquire SPI semaphore\nTrigger task\nRelease SPI semaphore, enabling the SPI slave to acquire it\nRelease SPI semaphore, enabling the SPI slave to acquire it\nField <code>TASKS_RELEASE</code> writer - Release SPI semaphore, …\n1: Trigger task\nRegister <code>TASKS_RELEASE</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Release SPI semaphore, enabling the SPI slave to …\nTrigger task\nAMOUNT (r) register accessor: an alias for <code>Reg&lt;AMOUNT_SPEC&gt;</code>\nLIST (rw) register accessor: an alias for <code>Reg&lt;LIST_SPEC&gt;</code>\nMAXCNT (rw) register accessor: an alias for …\nPTR (rw) register accessor: an alias for <code>Reg&lt;PTR_SPEC&gt;</code>\nRegister block\nNumber of bytes transmitted in last granted transaction\n0x08 - Number of bytes transmitted in last granted …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEasyDMA list type\n0x0c - EasyDMA list type\nMaximum number of bytes in transmit buffer\n0x04 - Maximum number of bytes in transmit buffer\nTXD data pointer\n0x00 - TXD data pointer\nField <code>AMOUNT</code> reader - Number of bytes transmitted in last …\nNumber of bytes transmitted in last granted transaction\nRegister <code>AMOUNT</code> reader\nBits 0:15 - Number of bytes transmitted in last granted …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n1: Use array list\n0: Disable EasyDMA list\nList type\nField <code>LIST</code> reader - List type\nEasyDMA list type\nField <code>LIST</code> writer - List type\nRegister <code>LIST</code> reader\nRegister <code>LIST</code> writer\nUse array list\nWrites raw bits to the register.\nDisable EasyDMA list\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>ARRAY_LIST</code>\nChecks if the value of the field is <code>DISABLED</code>\nBits 0:1 - List type\nBits 0:1 - List type\nGet enumerated values variant\nField <code>MAXCNT</code> reader - Maximum number of bytes in transmit …\nMaximum number of bytes in transmit buffer\nField <code>MAXCNT</code> writer - Maximum number of bytes in transmit …\nRegister <code>MAXCNT</code> reader\nRegister <code>MAXCNT</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:15 - Maximum number of bytes in transmit buffer\nBits 0:15 - Maximum number of bytes in transmit buffer\nField <code>PTR</code> reader - TXD data pointer\nTXD data pointer\nField <code>PTR</code> writer - TXD data pointer\nRegister <code>PTR</code> reader\nRegister <code>PTR</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - TXD data pointer\nBits 0:31 - TXD data pointer\nRegister block\nUNUSED (r) register accessor: an alias for <code>Reg&lt;UNUSED_SPEC&gt;</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUnused.\n0x00 - Unused.\nRegister <code>UNUSED</code> reader\nUnused.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA0 (rw) register accessor: an alias for <code>Reg&lt;A0_SPEC&gt;</code>\nA1 (rw) register accessor: an alias for <code>Reg&lt;A1_SPEC&gt;</code>\nA2 (rw) register accessor: an alias for <code>Reg&lt;A2_SPEC&gt;</code>\nA3 (rw) register accessor: an alias for <code>Reg&lt;A3_SPEC&gt;</code>\nA4 (rw) register accessor: an alias for <code>Reg&lt;A4_SPEC&gt;</code>\nA5 (rw) register accessor: an alias for <code>Reg&lt;A5_SPEC&gt;</code>\nB0 (rw) register accessor: an alias for <code>Reg&lt;B0_SPEC&gt;</code>\nB1 (rw) register accessor: an alias for <code>Reg&lt;B1_SPEC&gt;</code>\nB2 (rw) register accessor: an alias for <code>Reg&lt;B2_SPEC&gt;</code>\nB3 (rw) register accessor: an alias for <code>Reg&lt;B3_SPEC&gt;</code>\nB4 (rw) register accessor: an alias for <code>Reg&lt;B4_SPEC&gt;</code>\nB5 (rw) register accessor: an alias for <code>Reg&lt;B5_SPEC&gt;</code>\nEVENTS_DATARDY (rw) register accessor: an alias for …\nINTENCLR (rw) register accessor: an alias for …\nINTENSET (rw) register accessor: an alias for …\nRegister block\nT0 (rw) register accessor: an alias for <code>Reg&lt;T0_SPEC&gt;</code>\nT1 (rw) register accessor: an alias for <code>Reg&lt;T1_SPEC&gt;</code>\nT2 (rw) register accessor: an alias for <code>Reg&lt;T2_SPEC&gt;</code>\nT3 (rw) register accessor: an alias for <code>Reg&lt;T3_SPEC&gt;</code>\nT4 (rw) register accessor: an alias for <code>Reg&lt;T4_SPEC&gt;</code>\nTASKS_START (w) register accessor: an alias for …\nTASKS_STOP (w) register accessor: an alias for …\nTEMP (r) register accessor: an alias for <code>Reg&lt;TEMP_SPEC&gt;</code>\nSlope of 1st piece wise linear function\n0x520 - Slope of 1st piece wise linear function\nSlope of 2nd piece wise linear function\n0x524 - Slope of 2nd piece wise linear function\nSlope of 3rd piece wise linear function\n0x528 - Slope of 3rd piece wise linear function\nSlope of 4th piece wise linear function\n0x52c - Slope of 4th piece wise linear function\nSlope of 5th piece wise linear function\n0x530 - Slope of 5th piece wise linear function\nSlope of 6th piece wise linear function\n0x534 - Slope of 6th piece wise linear function\ny-intercept of 1st piece wise linear function\n0x540 - y-intercept of 1st piece wise linear function\ny-intercept of 2nd piece wise linear function\n0x544 - y-intercept of 2nd piece wise linear function\ny-intercept of 3rd piece wise linear function\n0x548 - y-intercept of 3rd piece wise linear function\ny-intercept of 4th piece wise linear function\n0x54c - y-intercept of 4th piece wise linear function\ny-intercept of 5th piece wise linear function\n0x550 - y-intercept of 5th piece wise linear function\ny-intercept of 6th piece wise linear function\n0x554 - y-intercept of 6th piece wise linear function\nTemperature measurement complete, data ready\n0x100 - Temperature measurement complete, data ready\nReturns the argument unchanged.\nDisable interrupt\n0x308 - Disable interrupt\nEnable interrupt\n0x304 - Enable interrupt\nCalls <code>U::from(self)</code>.\nEnd point of 1st piece wise linear function\n0x560 - End point of 1st piece wise linear function\nEnd point of 2nd piece wise linear function\n0x564 - End point of 2nd piece wise linear function\nEnd point of 3rd piece wise linear function\n0x568 - End point of 3rd piece wise linear function\nEnd point of 4th piece wise linear function\n0x56c - End point of 4th piece wise linear function\nEnd point of 5th piece wise linear function\n0x570 - End point of 5th piece wise linear function\nStart temperature measurement\n0x00 - Start temperature measurement\nStop temperature measurement\n0x04 - Stop temperature measurement\nTemperature in degC (0.25deg steps)\n0x508 - Temperature in degC (0.25deg steps)\nField <code>A0</code> reader - Slope of 1st piece wise linear function\nSlope of 1st piece wise linear function\nField <code>A0</code> writer - Slope of 1st piece wise linear function\nRegister <code>A0</code> reader\nRegister <code>A0</code> writer\nBits 0:11 - Slope of 1st piece wise linear function\nBits 0:11 - Slope of 1st piece wise linear function\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>A1</code> reader - Slope of 2nd piece wise linear function\nSlope of 2nd piece wise linear function\nField <code>A1</code> writer - Slope of 2nd piece wise linear function\nRegister <code>A1</code> reader\nRegister <code>A1</code> writer\nBits 0:11 - Slope of 2nd piece wise linear function\nBits 0:11 - Slope of 2nd piece wise linear function\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>A2</code> reader - Slope of 3rd piece wise linear function\nSlope of 3rd piece wise linear function\nField <code>A2</code> writer - Slope of 3rd piece wise linear function\nRegister <code>A2</code> reader\nRegister <code>A2</code> writer\nBits 0:11 - Slope of 3rd piece wise linear function\nBits 0:11 - Slope of 3rd piece wise linear function\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>A3</code> reader - Slope of 4th piece wise linear function\nSlope of 4th piece wise linear function\nField <code>A3</code> writer - Slope of 4th piece wise linear function\nRegister <code>A3</code> reader\nRegister <code>A3</code> writer\nBits 0:11 - Slope of 4th piece wise linear function\nBits 0:11 - Slope of 4th piece wise linear function\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>A4</code> reader - Slope of 5th piece wise linear function\nSlope of 5th piece wise linear function\nField <code>A4</code> writer - Slope of 5th piece wise linear function\nRegister <code>A4</code> reader\nRegister <code>A4</code> writer\nBits 0:11 - Slope of 5th piece wise linear function\nBits 0:11 - Slope of 5th piece wise linear function\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>A5</code> reader - Slope of 6th piece wise linear function\nSlope of 6th piece wise linear function\nField <code>A5</code> writer - Slope of 6th piece wise linear function\nRegister <code>A5</code> reader\nRegister <code>A5</code> writer\nBits 0:11 - Slope of 6th piece wise linear function\nBits 0:11 - Slope of 6th piece wise linear function\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>B0</code> reader - y-intercept of 1st piece wise linear …\ny-intercept of 1st piece wise linear function\nField <code>B0</code> writer - y-intercept of 1st piece wise linear …\nRegister <code>B0</code> reader\nRegister <code>B0</code> writer\nBits 0:13 - y-intercept of 1st piece wise linear function\nBits 0:13 - y-intercept of 1st piece wise linear function\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>B1</code> reader - y-intercept of 2nd piece wise linear …\ny-intercept of 2nd piece wise linear function\nField <code>B1</code> writer - y-intercept of 2nd piece wise linear …\nRegister <code>B1</code> reader\nRegister <code>B1</code> writer\nBits 0:13 - y-intercept of 2nd piece wise linear function\nBits 0:13 - y-intercept of 2nd piece wise linear function\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>B2</code> reader - y-intercept of 3rd piece wise linear …\ny-intercept of 3rd piece wise linear function\nField <code>B2</code> writer - y-intercept of 3rd piece wise linear …\nRegister <code>B2</code> reader\nRegister <code>B2</code> writer\nBits 0:13 - y-intercept of 3rd piece wise linear function\nBits 0:13 - y-intercept of 3rd piece wise linear function\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>B3</code> reader - y-intercept of 4th piece wise linear …\ny-intercept of 4th piece wise linear function\nField <code>B3</code> writer - y-intercept of 4th piece wise linear …\nRegister <code>B3</code> reader\nRegister <code>B3</code> writer\nBits 0:13 - y-intercept of 4th piece wise linear function\nBits 0:13 - y-intercept of 4th piece wise linear function\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>B4</code> reader - y-intercept of 5th piece wise linear …\ny-intercept of 5th piece wise linear function\nField <code>B4</code> writer - y-intercept of 5th piece wise linear …\nRegister <code>B4</code> reader\nRegister <code>B4</code> writer\nBits 0:13 - y-intercept of 5th piece wise linear function\nBits 0:13 - y-intercept of 5th piece wise linear function\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nField <code>B5</code> reader - y-intercept of 6th piece wise linear …\ny-intercept of 6th piece wise linear function\nField <code>B5</code> writer - y-intercept of 6th piece wise linear …\nRegister <code>B5</code> reader\nRegister <code>B5</code> writer\nBits 0:13 - y-intercept of 6th piece wise linear function\nBits 0:13 - y-intercept of 6th piece wise linear function\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTemperature measurement complete, data ready\nField <code>EVENTS_DATARDY</code> reader - Temperature measurement …\nTemperature measurement complete, data ready\nField <code>EVENTS_DATARDY</code> writer - Temperature measurement …\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_DATARDY</code> reader\nRegister <code>EVENTS_DATARDY</code> writer\nWrites raw bits to the register.\nBit 0 - Temperature measurement complete, data ready\nBit 0 - Temperature measurement complete, data ready\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\n1: Disable\nWrite ‘1’ to disable interrupt for event DATARDY\nWrite ‘1’ to disable interrupt for event DATARDY\nField <code>DATARDY</code> reader - Write ‘1’ to disable interrupt …\nField <code>DATARDY</code> writer - Write ‘1’ to disable interrupt …\n0: Read: Disabled\n1: Read: Enabled\nDisable interrupt\nRegister <code>INTENCLR</code> reader\nRegister <code>INTENCLR</code> writer\nWrites raw bits to the register.\nDisable\nBit 0 - Write ‘1’ to disable interrupt for event …\nBit 0 - Write ‘1’ to disable interrupt for event …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\nWrite ‘1’ to enable interrupt for event DATARDY\nWrite ‘1’ to enable interrupt for event DATARDY\nField <code>DATARDY</code> reader - Write ‘1’ to enable interrupt …\nField <code>DATARDY</code> writer - Write ‘1’ to enable interrupt …\n0: Read: Disabled\n1: Read: Enabled\nEnable interrupt\nRegister <code>INTENSET</code> reader\n1: Enable\nRegister <code>INTENSET</code> writer\nWrites raw bits to the register.\nBit 0 - Write ‘1’ to enable interrupt for event DATARDY\nBit 0 - Write ‘1’ to enable interrupt for event DATARDY\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nEnable\nGet enumerated values variant\nRegister <code>T0</code> reader\nField <code>T0</code> reader - End point of 1st piece wise linear …\nEnd point of 1st piece wise linear function\nField <code>T0</code> writer - End point of 1st piece wise linear …\nRegister <code>T0</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:7 - End point of 1st piece wise linear function\nBits 0:7 - End point of 1st piece wise linear function\nRegister <code>T1</code> reader\nField <code>T1</code> reader - End point of 2nd piece wise linear …\nEnd point of 2nd piece wise linear function\nField <code>T1</code> writer - End point of 2nd piece wise linear …\nRegister <code>T1</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:7 - End point of 2nd piece wise linear function\nBits 0:7 - End point of 2nd piece wise linear function\nRegister <code>T2</code> reader\nField <code>T2</code> reader - End point of 3rd piece wise linear …\nEnd point of 3rd piece wise linear function\nField <code>T2</code> writer - End point of 3rd piece wise linear …\nRegister <code>T2</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:7 - End point of 3rd piece wise linear function\nBits 0:7 - End point of 3rd piece wise linear function\nRegister <code>T3</code> reader\nField <code>T3</code> reader - End point of 4th piece wise linear …\nEnd point of 4th piece wise linear function\nField <code>T3</code> writer - End point of 4th piece wise linear …\nRegister <code>T3</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:7 - End point of 4th piece wise linear function\nBits 0:7 - End point of 4th piece wise linear function\nRegister <code>T4</code> reader\nField <code>T4</code> reader - End point of 5th piece wise linear …\nEnd point of 5th piece wise linear function\nField <code>T4</code> writer - End point of 5th piece wise linear …\nRegister <code>T4</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:7 - End point of 5th piece wise linear function\nBits 0:7 - End point of 5th piece wise linear function\nStart temperature measurement\nStart temperature measurement\nField <code>TASKS_START</code> writer - Start temperature measurement\n1: Trigger task\nRegister <code>TASKS_START</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Start temperature measurement\nTrigger task\nStop temperature measurement\nStop temperature measurement\nField <code>TASKS_STOP</code> writer - Stop temperature measurement\n1: Trigger task\nRegister <code>TASKS_STOP</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Stop temperature measurement\nTrigger task\nRegister <code>TEMP</code> reader\nField <code>TEMP</code> reader - Temperature in degC (0.25deg steps)\nTemperature in degC (0.25deg steps)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Temperature in degC (0.25deg steps)\nBITMODE (rw) register accessor: an alias for …\nCC (rw) register accessor: an alias for <code>Reg&lt;CC_SPEC&gt;</code>\nEVENTS_COMPARE (rw) register accessor: an alias for …\nINTENCLR (rw) register accessor: an alias for …\nINTENSET (rw) register accessor: an alias for …\nMODE (rw) register accessor: an alias for <code>Reg&lt;MODE_SPEC&gt;</code>\nPRESCALER (rw) register accessor: an alias for …\nRegister block\nSHORTS (rw) register accessor: an alias for …\nTASKS_CAPTURE (w) register accessor: an alias for …\nTASKS_CLEAR (w) register accessor: an alias for …\nTASKS_COUNT (w) register accessor: an alias for …\nTASKS_SHUTDOWN (w) register accessor: an alias for …\nTASKS_START (w) register accessor: an alias for …\nTASKS_STOP (w) register accessor: an alias for …\nConfigure the number of bits used by the TIMER\n0x508 - Configure the number of bits used by the TIMER\nDescription collection: Capture/Compare register n\n0x540..0x558 - Description collection: Capture/Compare …\nDescription collection: Compare event on CC[n] match\n0x140..0x158 - Description collection: Compare event on CC…\nReturns the argument unchanged.\nDisable interrupt\n0x308 - Disable interrupt\nEnable interrupt\n0x304 - Enable interrupt\nCalls <code>U::from(self)</code>.\nTimer mode selection\n0x504 - Timer mode selection\nTimer prescaler register\n0x510 - Timer prescaler register\nShortcuts between local events and tasks\n0x200 - Shortcuts between local events and tasks\nDescription collection: Capture Timer value to CC[n] …\n0x40..0x58 - Description collection: Capture Timer value …\nClear time\n0x0c - Clear time\nIncrement Timer (Counter mode only)\n0x08 - Increment Timer (Counter mode only)\nDeprecated register - Shut down timer\n0x10 - Deprecated register - Shut down timer\nStart Timer\n0x00 - Start Timer\nStop Timer\n0x04 - Stop Timer\nTimer bit width\nField <code>BITMODE</code> reader - Timer bit width\nConfigure the number of bits used by the TIMER\nField <code>BITMODE</code> writer - Timer bit width\nRegister <code>BITMODE</code> reader\nRegister <code>BITMODE</code> writer\n1: 8 bit timer bit width\n8 bit timer bit width\n0: 16 bit timer bit width\n16 bit timer bit width\n2: 24 bit timer bit width\n24 bit timer bit width\n3: 32 bit timer bit width\n32 bit timer bit width\nBits 0:1 - Timer bit width\nBits 0:1 - Timer bit width\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>_08BIT</code>\nChecks if the value of the field is <code>_16BIT</code>\nChecks if the value of the field is <code>_24BIT</code>\nChecks if the value of the field is <code>_32BIT</code>\nGet enumerated values variant\nField <code>CC</code> reader - Capture/Compare value\nDescription collection: Capture/Compare register n\nField <code>CC</code> writer - Capture/Compare value\nRegister <code>CC[%s]</code> reader\nRegister <code>CC[%s]</code> writer\nWrites raw bits to the register.\nBits 0:31 - Capture/Compare value\nBits 0:31 - Capture/Compare value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompare event on CC[n] match\nField <code>EVENTS_COMPARE</code> reader - Compare event on CC[n] match\nDescription collection: Compare event on CC[n] match\nField <code>EVENTS_COMPARE</code> writer - Compare event on CC[n] match\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_COMPARE[%s]</code> reader\nRegister <code>EVENTS_COMPARE[%s]</code> writer\nWrites raw bits to the register.\nBit 0 - Compare event on CC[n] match\nBit 0 - Compare event on CC[n] match\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\nWrite ‘1’ to disable interrupt for event COMPARE[0]\nWrite ‘1’ to disable interrupt for event COMPARE[0]\nField <code>COMPARE0</code> reader - Write ‘1’ to disable interrupt …\nField <code>COMPARE0</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for event COMPARE[1]\nWrite ‘1’ to disable interrupt for event COMPARE[1]\nField <code>COMPARE1</code> reader - Write ‘1’ to disable interrupt …\nField <code>COMPARE1</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for event COMPARE[2]\nWrite ‘1’ to disable interrupt for event COMPARE[2]\nField <code>COMPARE2</code> reader - Write ‘1’ to disable interrupt …\nField <code>COMPARE2</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for event COMPARE[3]\nWrite ‘1’ to disable interrupt for event COMPARE[3]\nField <code>COMPARE3</code> reader - Write ‘1’ to disable interrupt …\nField <code>COMPARE3</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for event COMPARE[4]\nWrite ‘1’ to disable interrupt for event COMPARE[4]\nField <code>COMPARE4</code> reader - Write ‘1’ to disable interrupt …\nField <code>COMPARE4</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for event COMPARE[5]\nWrite ‘1’ to disable interrupt for event COMPARE[5]\nField <code>COMPARE5</code> reader - Write ‘1’ to disable interrupt …\nField <code>COMPARE5</code> writer - Write ‘1’ to disable interrupt …\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nDisable interrupt\nRegister <code>INTENCLR</code> reader\nRegister <code>INTENCLR</code> writer\nWrites raw bits to the register.\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nBit 16 - Write ‘1’ to disable interrupt for event …\nBit 16 - Write ‘1’ to disable interrupt for event …\nBit 17 - Write ‘1’ to disable interrupt for event …\nBit 17 - Write ‘1’ to disable interrupt for event …\nBit 18 - Write ‘1’ to disable interrupt for event …\nBit 18 - Write ‘1’ to disable interrupt for event …\nBit 19 - Write ‘1’ to disable interrupt for event …\nBit 19 - Write ‘1’ to disable interrupt for event …\nBit 20 - Write ‘1’ to disable interrupt for event …\nBit 20 - Write ‘1’ to disable interrupt for event …\nBit 21 - Write ‘1’ to disable interrupt for event …\nBit 21 - Write ‘1’ to disable interrupt for event …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nWrite ‘1’ to enable interrupt for event COMPARE[0]\nWrite ‘1’ to enable interrupt for event COMPARE[0]\nField <code>COMPARE0</code> reader - Write ‘1’ to enable interrupt …\nField <code>COMPARE0</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for event COMPARE[1]\nWrite ‘1’ to enable interrupt for event COMPARE[1]\nField <code>COMPARE1</code> reader - Write ‘1’ to enable interrupt …\nField <code>COMPARE1</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for event COMPARE[2]\nWrite ‘1’ to enable interrupt for event COMPARE[2]\nField <code>COMPARE2</code> reader - Write ‘1’ to enable interrupt …\nField <code>COMPARE2</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for event COMPARE[3]\nWrite ‘1’ to enable interrupt for event COMPARE[3]\nField <code>COMPARE3</code> reader - Write ‘1’ to enable interrupt …\nField <code>COMPARE3</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for event COMPARE[4]\nWrite ‘1’ to enable interrupt for event COMPARE[4]\nField <code>COMPARE4</code> reader - Write ‘1’ to enable interrupt …\nField <code>COMPARE4</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for event COMPARE[5]\nWrite ‘1’ to enable interrupt for event COMPARE[5]\nField <code>COMPARE5</code> reader - Write ‘1’ to enable interrupt …\nField <code>COMPARE5</code> writer - Write ‘1’ to enable interrupt …\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nEnable interrupt\nRegister <code>INTENSET</code> reader\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\nRegister <code>INTENSET</code> writer\nWrites raw bits to the register.\nBit 16 - Write ‘1’ to enable interrupt for event …\nBit 16 - Write ‘1’ to enable interrupt for event …\nBit 17 - Write ‘1’ to enable interrupt for event …\nBit 17 - Write ‘1’ to enable interrupt for event …\nBit 18 - Write ‘1’ to enable interrupt for event …\nBit 18 - Write ‘1’ to enable interrupt for event …\nBit 19 - Write ‘1’ to enable interrupt for event …\nBit 19 - Write ‘1’ to enable interrupt for event …\nBit 20 - Write ‘1’ to enable interrupt for event …\nBit 20 - Write ‘1’ to enable interrupt for event …\nBit 21 - Write ‘1’ to enable interrupt for event …\nBit 21 - Write ‘1’ to enable interrupt for event …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\n1: Deprecated enumerator - Select Counter mode\n2: Select Low Power Counter mode\nTimer mode\nField <code>MODE</code> reader - Timer mode\nTimer mode selection\nField <code>MODE</code> writer - Timer mode\nRegister <code>MODE</code> reader\n0: Select Timer mode\nRegister <code>MODE</code> writer\nWrites raw bits to the register.\nDeprecated enumerator - Select Counter mode\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>COUNTER</code>\nChecks if the value of the field is <code>LOW_POWER_COUNTER</code>\nChecks if the value of the field is <code>TIMER</code>\nSelect Low Power Counter mode\nBits 0:1 - Timer mode\nBits 0:1 - Timer mode\nSelect Timer mode\nGet enumerated values variant\nField <code>PRESCALER</code> reader - Prescaler value\nTimer prescaler register\nField <code>PRESCALER</code> writer - Prescaler value\nRegister <code>PRESCALER</code> reader\nRegister <code>PRESCALER</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:3 - Prescaler value\nBits 0:3 - Prescaler value\nShortcut between event COMPARE[0] and task CLEAR\nField <code>COMPARE0_CLEAR</code> reader - Shortcut between event …\nField <code>COMPARE0_CLEAR</code> writer - Shortcut between event …\nShortcut between event COMPARE[0] and task STOP\nField <code>COMPARE0_STOP</code> reader - Shortcut between event COMPARE…\nField <code>COMPARE0_STOP</code> writer - Shortcut between event COMPARE…\nShortcut between event COMPARE[1] and task CLEAR\nField <code>COMPARE1_CLEAR</code> reader - Shortcut between event …\nField <code>COMPARE1_CLEAR</code> writer - Shortcut between event …\nShortcut between event COMPARE[1] and task STOP\nField <code>COMPARE1_STOP</code> reader - Shortcut between event COMPARE…\nField <code>COMPARE1_STOP</code> writer - Shortcut between event COMPARE…\nShortcut between event COMPARE[2] and task CLEAR\nField <code>COMPARE2_CLEAR</code> reader - Shortcut between event …\nField <code>COMPARE2_CLEAR</code> writer - Shortcut between event …\nShortcut between event COMPARE[2] and task STOP\nField <code>COMPARE2_STOP</code> reader - Shortcut between event COMPARE…\nField <code>COMPARE2_STOP</code> writer - Shortcut between event COMPARE…\nShortcut between event COMPARE[3] and task CLEAR\nField <code>COMPARE3_CLEAR</code> reader - Shortcut between event …\nField <code>COMPARE3_CLEAR</code> writer - Shortcut between event …\nShortcut between event COMPARE[3] and task STOP\nField <code>COMPARE3_STOP</code> reader - Shortcut between event COMPARE…\nField <code>COMPARE3_STOP</code> writer - Shortcut between event COMPARE…\nShortcut between event COMPARE[4] and task CLEAR\nField <code>COMPARE4_CLEAR</code> reader - Shortcut between event …\nField <code>COMPARE4_CLEAR</code> writer - Shortcut between event …\nShortcut between event COMPARE[4] and task STOP\nField <code>COMPARE4_STOP</code> reader - Shortcut between event COMPARE…\nField <code>COMPARE4_STOP</code> writer - Shortcut between event COMPARE…\nShortcut between event COMPARE[5] and task CLEAR\nField <code>COMPARE5_CLEAR</code> reader - Shortcut between event …\nField <code>COMPARE5_CLEAR</code> writer - Shortcut between event …\nShortcut between event COMPARE[5] and task STOP\nField <code>COMPARE5_STOP</code> reader - Shortcut between event COMPARE…\nField <code>COMPARE5_STOP</code> writer - Shortcut between event COMPARE…\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\nRegister <code>SHORTS</code> reader\nShortcuts between local events and tasks\nRegister <code>SHORTS</code> writer\nWrites raw bits to the register.\nBit 0 - Shortcut between event COMPARE[0] and task CLEAR\nBit 0 - Shortcut between event COMPARE[0] and task CLEAR\nBit 8 - Shortcut between event COMPARE[0] and task STOP\nBit 8 - Shortcut between event COMPARE[0] and task STOP\nBit 1 - Shortcut between event COMPARE[1] and task CLEAR\nBit 1 - Shortcut between event COMPARE[1] and task CLEAR\nBit 9 - Shortcut between event COMPARE[1] and task STOP\nBit 9 - Shortcut between event COMPARE[1] and task STOP\nBit 2 - Shortcut between event COMPARE[2] and task CLEAR\nBit 2 - Shortcut between event COMPARE[2] and task CLEAR\nBit 10 - Shortcut between event COMPARE[2] and task STOP\nBit 10 - Shortcut between event COMPARE[2] and task STOP\nBit 3 - Shortcut between event COMPARE[3] and task CLEAR\nBit 3 - Shortcut between event COMPARE[3] and task CLEAR\nBit 11 - Shortcut between event COMPARE[3] and task STOP\nBit 11 - Shortcut between event COMPARE[3] and task STOP\nBit 4 - Shortcut between event COMPARE[4] and task CLEAR\nBit 4 - Shortcut between event COMPARE[4] and task CLEAR\nBit 12 - Shortcut between event COMPARE[4] and task STOP\nBit 12 - Shortcut between event COMPARE[4] and task STOP\nBit 5 - Shortcut between event COMPARE[5] and task CLEAR\nBit 5 - Shortcut between event COMPARE[5] and task CLEAR\nBit 13 - Shortcut between event COMPARE[5] and task STOP\nBit 13 - Shortcut between event COMPARE[5] and task STOP\nDisable shortcut\nDisable shortcut\nDisable shortcut\nDisable shortcut\nDisable shortcut\nDisable shortcut\nDisable shortcut\nDisable shortcut\nDisable shortcut\nDisable shortcut\nDisable shortcut\nDisable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nCapture Timer value to CC[n] register\nDescription collection: Capture Timer value to CC[n] …\nField <code>TASKS_CAPTURE</code> writer - Capture Timer value to CC[n] …\n1: Trigger task\nRegister <code>TASKS_CAPTURE[%s]</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Capture Timer value to CC[n] register\nTrigger task\nClear time\nClear time\nField <code>TASKS_CLEAR</code> writer - Clear time\n1: Trigger task\nRegister <code>TASKS_CLEAR</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Clear time\nTrigger task\nIncrement Timer (Counter mode only)\nIncrement Timer (Counter mode only)\nField <code>TASKS_COUNT</code> writer - Increment Timer (Counter mode …\n1: Trigger task\nRegister <code>TASKS_COUNT</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Increment Timer (Counter mode only)\nTrigger task\nDeprecated field - Shut down timer\nDeprecated register - Shut down timer\nField <code>TASKS_SHUTDOWN</code> writer - Deprecated field - Shut down …\n1: Trigger task\nRegister <code>TASKS_SHUTDOWN</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Deprecated field - Shut down timer\nTrigger task\nStart Timer\nStart Timer\nField <code>TASKS_START</code> writer - Start Timer\n1: Trigger task\nRegister <code>TASKS_START</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Start Timer\nTrigger task\nStop Timer\nStop Timer\nField <code>TASKS_STOP</code> writer - Stop Timer\n1: Trigger task\nRegister <code>TASKS_STOP</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Stop Timer\nTrigger task\nADDRESS (rw) register accessor: an alias for …\nENABLE (rw) register accessor: an alias for …\nERRORSRC (rw) register accessor: an alias for …\nEVENTS_BB (rw) register accessor: an alias for …\nEVENTS_ERROR (rw) register accessor: an alias for …\nEVENTS_RXDREADY (rw) register accessor: an alias for …\nEVENTS_STOPPED (rw) register accessor: an alias for …\nEVENTS_SUSPENDED (rw) register accessor: an alias for …\nEVENTS_TXDSENT (rw) register accessor: an alias for …\nFREQUENCY (rw) register accessor: an alias for …\nINTENCLR (rw) register accessor: an alias for …\nINTENSET (rw) register accessor: an alias for …\nUnspecified\nRXD (r) register accessor: an alias for <code>Reg&lt;RXD_SPEC&gt;</code>\nRegister block\nSHORTS (rw) register accessor: an alias for …\nTASKS_RESUME (w) register accessor: an alias for …\nTASKS_STARTRX (w) register accessor: an alias for …\nTASKS_STARTTX (w) register accessor: an alias for …\nTASKS_STOP (w) register accessor: an alias for …\nTASKS_SUSPEND (w) register accessor: an alias for …\nTXD (rw) register accessor: an alias for <code>Reg&lt;TXD_SPEC&gt;</code>\nAddress used in the TWI transfer\n0x588 - Address used in the TWI transfer\nEnable TWI\n0x500 - Enable TWI\nError source\n0x4c4 - Error source\nTWI byte boundary, generated before each byte that is sent …\n0x138 - TWI byte boundary, generated before each byte that …\nTWI error\n0x124 - TWI error\nTWI RXD byte received\n0x108 - TWI RXD byte received\nTWI stopped\n0x104 - TWI stopped\nTWI entered the suspended state\n0x148 - TWI entered the suspended state\nTWI TXD byte sent\n0x11c - TWI TXD byte sent\nTWI frequency. Accuracy depends on the HFCLK source …\n0x524 - TWI frequency. Accuracy depends on the HFCLK …\nReturns the argument unchanged.\nDisable interrupt\n0x308 - Disable interrupt\nEnable interrupt\n0x304 - Enable interrupt\nCalls <code>U::from(self)</code>.\nCluster Unspecified\n0x508..0x510 - Unspecified\nRXD register\n0x518 - RXD register\nShortcuts between local events and tasks\n0x200 - Shortcuts between local events and tasks\nResume TWI transaction\n0x20 - Resume TWI transaction\nStart TWI receive sequence\n0x00 - Start TWI receive sequence\nStart TWI transmit sequence\n0x08 - Start TWI transmit sequence\nStop TWI transaction\n0x14 - Stop TWI transaction\nSuspend TWI transaction\n0x1c - Suspend TWI transaction\nTXD register\n0x51c - TXD register\nField <code>ADDRESS</code> reader - Address used in the TWI transfer\nAddress used in the TWI transfer\nField <code>ADDRESS</code> writer - Address used in the TWI transfer\nRegister <code>ADDRESS</code> reader\nRegister <code>ADDRESS</code> writer\nBits 0:6 - Address used in the TWI transfer\nBits 0:6 - Address used in the TWI transfer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n0: Disable TWI\n5: Enable TWI\nEnable or disable TWI\nField <code>ENABLE</code> reader - Enable or disable TWI\nEnable TWI\nField <code>ENABLE</code> writer - Enable or disable TWI\nRegister <code>ENABLE</code> reader\nRegister <code>ENABLE</code> writer\nWrites raw bits to the register.\nDisable TWI\nBits 0:3 - Enable or disable TWI\nBits 0:3 - Enable or disable TWI\nEnable TWI\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\nNACK received after sending the address (write ‘1’ to …\nField <code>ANACK</code> reader - NACK received after sending the …\nField <code>ANACK</code> writer - NACK received after sending the …\nNACK received after sending a data byte (write ‘1’ to …\nField <code>DNACK</code> reader - NACK received after sending a data …\nField <code>DNACK</code> writer - NACK received after sending a data …\nError source\n0: Read: no overrun occured\n0: Read: error not present\n0: Read: error not present\nOverrun error\nField <code>OVERRUN</code> reader - Overrun error\nField <code>OVERRUN</code> writer - Overrun error\n1: Read: overrun occured\n1: Read: error present\n1: Read: error present\nRegister <code>ERRORSRC</code> reader\nRegister <code>ERRORSRC</code> writer\nBit 1 - NACK received after sending the address (write ‘1…\nBit 1 - NACK received after sending the address (write ‘1…\nWrites raw bits to the register.\nBit 2 - NACK received after sending a data byte (write ‘1…\nBit 2 - NACK received after sending a data byte (write ‘1…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>NOT_PRESENT</code>\nChecks if the value of the field is <code>NOT_PRESENT</code>\nChecks if the value of the field is <code>NOT_PRESENT</code>\nChecks if the value of the field is <code>PRESENT</code>\nChecks if the value of the field is <code>PRESENT</code>\nChecks if the value of the field is <code>PRESENT</code>\nRead: no overrun occured\nRead: error not present\nRead: error not present\nBit 0 - Overrun error\nBit 0 - Overrun error\nRead: overrun occured\nRead: error present\nRead: error present\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nTWI byte boundary, generated before each byte that is sent …\nField <code>EVENTS_BB</code> reader - TWI byte boundary, generated …\nTWI byte boundary, generated before each byte that is sent …\nField <code>EVENTS_BB</code> writer - TWI byte boundary, generated …\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_BB</code> reader\nRegister <code>EVENTS_BB</code> writer\nWrites raw bits to the register.\nBit 0 - TWI byte boundary, generated before each byte that …\nBit 0 - TWI byte boundary, generated before each byte that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nTWI error\nField <code>EVENTS_ERROR</code> reader - TWI error\nTWI error\nField <code>EVENTS_ERROR</code> writer - TWI error\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_ERROR</code> reader\nRegister <code>EVENTS_ERROR</code> writer\nWrites raw bits to the register.\nBit 0 - TWI error\nBit 0 - TWI error\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nTWI RXD byte received\nField <code>EVENTS_RXDREADY</code> reader - TWI RXD byte received\nTWI RXD byte received\nField <code>EVENTS_RXDREADY</code> writer - TWI RXD byte received\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_RXDREADY</code> reader\nRegister <code>EVENTS_RXDREADY</code> writer\nWrites raw bits to the register.\nBit 0 - TWI RXD byte received\nBit 0 - TWI RXD byte received\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nTWI stopped\nField <code>EVENTS_STOPPED</code> reader - TWI stopped\nTWI stopped\nField <code>EVENTS_STOPPED</code> writer - TWI stopped\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_STOPPED</code> reader\nRegister <code>EVENTS_STOPPED</code> writer\nWrites raw bits to the register.\nBit 0 - TWI stopped\nBit 0 - TWI stopped\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nTWI entered the suspended state\nField <code>EVENTS_SUSPENDED</code> reader - TWI entered the suspended …\nTWI entered the suspended state\nField <code>EVENTS_SUSPENDED</code> writer - TWI entered the suspended …\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_SUSPENDED</code> reader\nRegister <code>EVENTS_SUSPENDED</code> writer\nWrites raw bits to the register.\nBit 0 - TWI entered the suspended state\nBit 0 - TWI entered the suspended state\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nTWI TXD byte sent\nField <code>EVENTS_TXDSENT</code> reader - TWI TXD byte sent\nTWI TXD byte sent\nField <code>EVENTS_TXDSENT</code> writer - TWI TXD byte sent\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_TXDSENT</code> reader\nRegister <code>EVENTS_TXDSENT</code> writer\nWrites raw bits to the register.\nBit 0 - TWI TXD byte sent\nBit 0 - TWI TXD byte sent\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nTWI master clock frequency\nField <code>FREQUENCY</code> reader - TWI master clock frequency\nTWI frequency. Accuracy depends on the HFCLK source …\nField <code>FREQUENCY</code> writer - TWI master clock frequency\n26738688: 100 kbps\n67108864: 250 kbps\n107479040: 400 kbps (actual rate 410.256 kbps)\nRegister <code>FREQUENCY</code> reader\nRegister <code>FREQUENCY</code> writer\nWrites raw bits to the register.\nBits 0:31 - TWI master clock frequency\nBits 0:31 - TWI master clock frequency\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>K100</code>\nChecks if the value of the field is <code>K250</code>\nChecks if the value of the field is <code>K400</code>\n100 kbps\n250 kbps\n400 kbps (actual rate 410.256 kbps)\nGet enumerated values variant\nWrite ‘1’ to disable interrupt for event BB\nWrite ‘1’ to disable interrupt for event BB\nField <code>BB</code> reader - Write ‘1’ to disable interrupt for …\nField <code>BB</code> writer - Write ‘1’ to disable interrupt for …\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nWrite ‘1’ to disable interrupt for event ERROR\nWrite ‘1’ to disable interrupt for event ERROR\nField <code>ERROR</code> reader - Write ‘1’ to disable interrupt …\nField <code>ERROR</code> writer - Write ‘1’ to disable interrupt …\nDisable interrupt\nRegister <code>INTENCLR</code> reader\nWrite ‘1’ to disable interrupt for event RXDREADY\nWrite ‘1’ to disable interrupt for event RXDREADY\nField <code>RXDREADY</code> reader - Write ‘1’ to disable interrupt …\nField <code>RXDREADY</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for event STOPPED\nWrite ‘1’ to disable interrupt for event STOPPED\nField <code>STOPPED</code> reader - Write ‘1’ to disable interrupt …\nField <code>STOPPED</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for event SUSPENDED\nWrite ‘1’ to disable interrupt for event SUSPENDED\nField <code>SUSPENDED</code> reader - Write ‘1’ to disable …\nField <code>SUSPENDED</code> writer - Write ‘1’ to disable …\nWrite ‘1’ to disable interrupt for event TXDSENT\nWrite ‘1’ to disable interrupt for event TXDSENT\nField <code>TXDSENT</code> reader - Write ‘1’ to disable interrupt …\nField <code>TXDSENT</code> writer - Write ‘1’ to disable interrupt …\nRegister <code>INTENCLR</code> writer\nBit 14 - Write ‘1’ to disable interrupt for event BB\nBit 14 - Write ‘1’ to disable interrupt for event BB\nWrites raw bits to the register.\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nBit 9 - Write ‘1’ to disable interrupt for event ERROR\nBit 9 - Write ‘1’ to disable interrupt for event ERROR\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 2 - Write ‘1’ to disable interrupt for event …\nBit 2 - Write ‘1’ to disable interrupt for event …\nBit 1 - Write ‘1’ to disable interrupt for event …\nBit 1 - Write ‘1’ to disable interrupt for event …\nBit 18 - Write ‘1’ to disable interrupt for event …\nBit 18 - Write ‘1’ to disable interrupt for event …\nBit 7 - Write ‘1’ to disable interrupt for event …\nBit 7 - Write ‘1’ to disable interrupt for event …\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nWrite ‘1’ to enable interrupt for event BB\nWrite ‘1’ to enable interrupt for event BB\nField <code>BB</code> reader - Write ‘1’ to enable interrupt for …\nField <code>BB</code> writer - Write ‘1’ to enable interrupt for …\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nWrite ‘1’ to enable interrupt for event ERROR\nWrite ‘1’ to enable interrupt for event ERROR\nField <code>ERROR</code> reader - Write ‘1’ to enable interrupt for …\nField <code>ERROR</code> writer - Write ‘1’ to enable interrupt for …\nEnable interrupt\nRegister <code>INTENSET</code> reader\nWrite ‘1’ to enable interrupt for event RXDREADY\nWrite ‘1’ to enable interrupt for event RXDREADY\nField <code>RXDREADY</code> reader - Write ‘1’ to enable interrupt …\nField <code>RXDREADY</code> writer - Write ‘1’ to enable interrupt …\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\nWrite ‘1’ to enable interrupt for event STOPPED\nWrite ‘1’ to enable interrupt for event STOPPED\nField <code>STOPPED</code> reader - Write ‘1’ to enable interrupt …\nField <code>STOPPED</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for event SUSPENDED\nWrite ‘1’ to enable interrupt for event SUSPENDED\nField <code>SUSPENDED</code> reader - Write ‘1’ to enable interrupt …\nField <code>SUSPENDED</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for event TXDSENT\nWrite ‘1’ to enable interrupt for event TXDSENT\nField <code>TXDSENT</code> reader - Write ‘1’ to enable interrupt …\nField <code>TXDSENT</code> writer - Write ‘1’ to enable interrupt …\nRegister <code>INTENSET</code> writer\nBit 14 - Write ‘1’ to enable interrupt for event BB\nBit 14 - Write ‘1’ to enable interrupt for event BB\nWrites raw bits to the register.\nBit 9 - Write ‘1’ to enable interrupt for event ERROR\nBit 9 - Write ‘1’ to enable interrupt for event ERROR\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 2 - Write ‘1’ to enable interrupt for event …\nBit 2 - Write ‘1’ to enable interrupt for event …\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nBit 1 - Write ‘1’ to enable interrupt for event STOPPED\nBit 1 - Write ‘1’ to enable interrupt for event STOPPED\nBit 18 - Write ‘1’ to enable interrupt for event …\nBit 18 - Write ‘1’ to enable interrupt for event …\nBit 7 - Write ‘1’ to enable interrupt for event TXDSENT\nBit 7 - Write ‘1’ to enable interrupt for event TXDSENT\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nRegister block\nSCL (rw) register accessor: an alias for <code>Reg&lt;SCL_SPEC&gt;</code>\nSDA (rw) register accessor: an alias for <code>Reg&lt;SDA_SPEC&gt;</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPin select for SCL\n0x00 - Pin select for SCL\nPin select for SDA\n0x04 - Pin select for SDA\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>SCL</code> reader\nPin select for SCL\nRegister <code>SCL</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\n0: Connect\nConnection\nField <code>CONNECT</code> reader - Connection\nField <code>CONNECT</code> writer - Connection\n1: Disconnect\nField <code>PIN</code> reader - Pin number\nField <code>PIN</code> writer - Pin number\nField <code>PORT</code> reader - Port number\nField <code>PORT</code> writer - Port number\nRegister <code>SDA</code> reader\nPin select for SDA\nRegister <code>SDA</code> writer\nWrites raw bits to the register.\nBit 31 - Connection\nBit 31 - Connection\nConnect\nDisconnect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CONNECTED</code>\nChecks if the value of the field is <code>DISCONNECTED</code>\nBits 0:4 - Pin number\nBits 0:4 - Pin number\nBit 5 - Port number\nBit 5 - Port number\nGet enumerated values variant\nRegister <code>RXD</code> reader\nField <code>RXD</code> reader - RXD register\nRXD register\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:7 - RXD register\nShortcut between event BB and task STOP\nField <code>BB_STOP</code> reader - Shortcut between event BB and task …\nField <code>BB_STOP</code> writer - Shortcut between event BB and task …\nShortcut between event BB and task SUSPEND\nField <code>BB_SUSPEND</code> reader - Shortcut between event BB and …\nField <code>BB_SUSPEND</code> writer - Shortcut between event BB and …\n0: Disable shortcut\n0: Disable shortcut\n1: Enable shortcut\n1: Enable shortcut\nRegister <code>SHORTS</code> reader\nShortcuts between local events and tasks\nRegister <code>SHORTS</code> writer\nBit 1 - Shortcut between event BB and task STOP\nBit 1 - Shortcut between event BB and task STOP\nBit 0 - Shortcut between event BB and task SUSPEND\nBit 0 - Shortcut between event BB and task SUSPEND\nWrites raw bits to the register.\nDisable shortcut\nDisable shortcut\nEnable shortcut\nEnable shortcut\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\nGet enumerated values variant\nResume TWI transaction\nResume TWI transaction\nField <code>TASKS_RESUME</code> writer - Resume TWI transaction\n1: Trigger task\nRegister <code>TASKS_RESUME</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Resume TWI transaction\nTrigger task\nStart TWI receive sequence\nStart TWI receive sequence\nField <code>TASKS_STARTRX</code> writer - Start TWI receive sequence\n1: Trigger task\nRegister <code>TASKS_STARTRX</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Start TWI receive sequence\nTrigger task\nStart TWI transmit sequence\nStart TWI transmit sequence\nField <code>TASKS_STARTTX</code> writer - Start TWI transmit sequence\n1: Trigger task\nRegister <code>TASKS_STARTTX</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Start TWI transmit sequence\nTrigger task\nStop TWI transaction\nStop TWI transaction\nField <code>TASKS_STOP</code> writer - Stop TWI transaction\n1: Trigger task\nRegister <code>TASKS_STOP</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Stop TWI transaction\nTrigger task\nSuspend TWI transaction\nSuspend TWI transaction\nField <code>TASKS_SUSPEND</code> writer - Suspend TWI transaction\n1: Trigger task\nRegister <code>TASKS_SUSPEND</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Suspend TWI transaction\nTrigger task\nRegister <code>TXD</code> reader\nField <code>TXD</code> reader - TXD register\nTXD register\nField <code>TXD</code> writer - TXD register\nRegister <code>TXD</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:7 - TXD register\nBits 0:7 - TXD register\nADDRESS (rw) register accessor: an alias for …\nENABLE (rw) register accessor: an alias for …\nERRORSRC (rw) register accessor: an alias for …\nEVENTS_ERROR (rw) register accessor: an alias for …\nEVENTS_LASTRX (rw) register accessor: an alias for …\nEVENTS_LASTTX (rw) register accessor: an alias for …\nEVENTS_RXSTARTED (rw) register accessor: an alias for …\nEVENTS_STOPPED (rw) register accessor: an alias for …\nEVENTS_SUSPENDED (rw) register accessor: an alias for …\nEVENTS_TXSTARTED (rw) register accessor: an alias for …\nFREQUENCY (rw) register accessor: an alias for …\nINTEN (rw) register accessor: an alias for <code>Reg&lt;INTEN_SPEC&gt;</code>\nINTENCLR (rw) register accessor: an alias for …\nINTENSET (rw) register accessor: an alias for …\nUnspecified\nRXD EasyDMA channel\nRegister block\nSHORTS (rw) register accessor: an alias for …\nTASKS_RESUME (w) register accessor: an alias for …\nTASKS_STARTRX (w) register accessor: an alias for …\nTASKS_STARTTX (w) register accessor: an alias for …\nTASKS_STOP (w) register accessor: an alias for …\nTASKS_SUSPEND (w) register accessor: an alias for …\nTXD EasyDMA channel\nAddress used in the TWI transfer\n0x588 - Address used in the TWI transfer\nEnable TWIM\n0x500 - Enable TWIM\nError source\n0x4c4 - Error source\nTWI error\n0x124 - TWI error\nByte boundary, starting to receive the last byte\n0x15c - Byte boundary, starting to receive the last byte\nByte boundary, starting to transmit the last byte\n0x160 - Byte boundary, starting to transmit the last byte\nReceive sequence started\n0x14c - Receive sequence started\nTWI stopped\n0x104 - TWI stopped\nLast byte has been sent out after the SUSPEND task has …\n0x148 - Last byte has been sent out after the SUSPEND task …\nTransmit sequence started\n0x150 - Transmit sequence started\nTWI frequency. Accuracy depends on the HFCLK source …\n0x524 - TWI frequency. Accuracy depends on the HFCLK …\nReturns the argument unchanged.\nEnable or disable interrupt\n0x300 - Enable or disable interrupt\nDisable interrupt\n0x308 - Disable interrupt\nEnable interrupt\n0x304 - Enable interrupt\nCalls <code>U::from(self)</code>.\nCluster Unspecified\n0x508..0x510 - Unspecified\nCluster RXD EasyDMA channel\n0x534..0x544 - RXD EasyDMA channel\nShortcuts between local events and tasks\n0x200 - Shortcuts between local events and tasks\nResume TWI transaction\n0x20 - Resume TWI transaction\nStart TWI receive sequence\n0x00 - Start TWI receive sequence\nStart TWI transmit sequence\n0x08 - Start TWI transmit sequence\nStop TWI transaction. Must be issued while the TWI master …\n0x14 - Stop TWI transaction. Must be issued while the TWI …\nSuspend TWI transaction\n0x1c - Suspend TWI transaction\nCluster TXD EasyDMA channel\n0x544..0x554 - TXD EasyDMA channel\nField <code>ADDRESS</code> reader - Address used in the TWI transfer\nAddress used in the TWI transfer\nField <code>ADDRESS</code> writer - Address used in the TWI transfer\nRegister <code>ADDRESS</code> reader")