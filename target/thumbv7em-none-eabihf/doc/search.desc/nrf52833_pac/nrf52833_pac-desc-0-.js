searchState.loadedDescShard("nrf52833_pac", 0, "Peripheral access API for NRF52833 microcontrollers …\nAccelerated Address Resolver\nAAR\nAccess control lists\nACL\nCache and branch predictor maintenance operations\nCache and branch predictor maintenance operations. Not …\nAES CCM Mode Encryption\nCCM\n15 - CCM_AAR\nClock control\nCLOCK\nComparator\nCOMP\n19 - COMP_LPCOMP\nCPUID\nCPUID\nCore peripherals\nDebug Control Block\nDebug Control Block\nData Watchpoint and Trace unit\nData Watchpoint and Trace unit\nAES ECB Mode Encryption\nECB\n14 - ECB\nEvent generator unit 0\nEGU0\nEvent generator unit 1\nEGU1\nEvent generator unit 2\nEGU2\nEvent generator unit 3\nEGU3\nEvent generator unit 4\nEGU4\nEvent generator unit 5\nEGU5\nFactory information configuration registers\nFICR\nFlash Patch and Breakpoint unit\nFlash Patch and Breakpoint unit. Not available on Armv6-M.\nFloating Point Unit\nFloating Point Unit.\n38 - FPU\nGPIO Tasks and Events\nGPIOTE\n6 - GPIOTE\nInter-IC Sound\nI2S\n37 - I2S\nImplementation Control Block.\nInstrumentation Trace Macrocell\nInstrumentation Trace Macrocell. Not available on Armv6-M …\nEnumeration of all the interrupts.\nLow-power comparator\nLPCOMP\nMemory Protection Unit\nMemory Protection Unit\nMemory Watch Unit\nMWU\n32 - MWU\nNFC-A compatible radio\nNFCT\n5 - NFCT\nNested Vector Interrupt Controller\nNested Vector Interrupt Controller\nNumber available in the NVIC for configuring priority\nNon Volatile Memory Controller\nNVMC\nGPIO Port 1\nP0\nGPIO Port 2\nP1\nPulse Density Modulation (Digital Microphone) Interface\nPDM\n29 - PDM\nPower control\nPOWER\n0 - POWER_CLOCK\nProgrammable Peripheral Interconnect\nPPI\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPointer to the register block\nPulse width modulation unit 0\nPWM0\n28 - PWM0\nPulse width modulation unit 1\nPWM1\n33 - PWM1\nPulse width modulation unit 2\nPWM2\n34 - PWM2\nPulse width modulation unit 3\nPWM3\n45 - PWM3\nAll the peripherals\nQuadrature Decoder\nQDEC\n18 - QDEC\n2.4 GHz radio\nRADIO\n1 - RADIO\nRandom Number Generator\nRNG\n13 - RNG\nReal time counter 0\nRTC0\n11 - RTC0\nReal time counter 1\nRTC1\n17 - RTC1\nReal time counter 2\nRTC2\n36 - RTC2\nSuccessive approximation register (SAR) analog-to-digital …\nSAADC\n7 - SAADC\nSecurity Attribution Unit\nSystem Control Block\nSystem Control Block\nSerial Peripheral Interface 0\nSPI0\nSerial Peripheral Interface 1\nSPI1\nSerial Peripheral Interface 2\nSPI2\nSerial Peripheral Interface Master with EasyDMA 0\nSPIM0\n3 - SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0\nSerial Peripheral Interface Master with EasyDMA 1\nSPIM1\n4 - SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1\nSerial Peripheral Interface Master with EasyDMA 2\nSPIM2\n35 - SPIM2_SPIS2_SPI2\nSerial Peripheral Interface Master with EasyDMA 3\nSPIM3\n47 - SPIM3\nSPI Slave 0\nSPIS0\nSPI Slave 1\nSPIS1\nSPI Slave 2\nSPIS2\nSoftware interrupt 0\nSWI0\n20 - SWI0_EGU0\nSoftware interrupt 1\nSWI1\n21 - SWI1_EGU1\nSoftware interrupt 2\nSWI2\n22 - SWI2_EGU2\nSoftware interrupt 3\nSWI3\n23 - SWI3_EGU3\nSoftware interrupt 4\nSWI4\n24 - SWI4_EGU4\nSoftware interrupt 5\nSWI5\n25 - SWI5_EGU5\nSysTick: System Timer\nSysTick: System Timer\nTemperature Sensor\nTEMP\n12 - TEMP\nTimer/Counter 0\nTIMER0\n8 - TIMER0\nTimer/Counter 1\nTIMER1\n9 - TIMER1\nTimer/Counter 2\nTIMER2\n10 - TIMER2\nTimer/Counter 3\nTIMER3\n26 - TIMER3\nTimer/Counter 4\nTIMER4\n27 - TIMER4\nTrace Port Interface Unit\nTrace Port Interface Unit. Not available on Armv6-M.\nI2C compatible Two-Wire Interface 0\nTWI0\nI2C compatible Two-Wire Interface 1\nTWI1\nI2C compatible Two-Wire Master Interface with EasyDMA 0\nTWIM0\nI2C compatible Two-Wire Master Interface with EasyDMA 1\nTWIM1\nI2C compatible Two-Wire Slave Interface with EasyDMA 0\nTWIS0\nI2C compatible Two-Wire Slave Interface with EasyDMA 1\nTWIS1\nUniversal Asynchronous Receiver/Transmitter\nUART0\nUART with EasyDMA 0\nUARTE0\n2 - UARTE0_UART0\nUART with EasyDMA 1\nUARTE1\n40 - UARTE1\nUser information configuration registers\nUICR\nUniversal serial bus device\nUSBD\n39 - USBD\nWatchdog Timer\nWDT\n16 - WDT\nAccelerated Address Resolver\nAccess control lists\nBranch predictor invalidate all\nReturns log2 of the number of words in the smallest cache …\nReturns log2 of the number of words in the smallest cache …\nReturns the number of sets and ways in the selected cache\nAES CCM Mode Encryption\nCleans the entire D-cache.\nCleans D-cache by address.\nCleans an object from the D-cache.\nCleans a slice from D-cache.\nCleans and invalidates the entire D-cache.\nCleans and invalidates D-cache by address.\nClears current value to 0\nSet the PENDSTCLR bit in the ICSR register which will …\nSet the PENDSVCLR bit in the ICSR register which will …\nClear the SLEEPDEEP bit in the SCR register\nClear the SLEEPONEXIT bit in the SCR register\nClock control\nComparator\nGet the CPI count\nReturns the current clock cycle count\nReturns <code>true</code> if the cycle counter is enabled\nReturns whether the D-cache is currently enabled.\nD-cache clean and invalidate by MVA to PoC\nD-cache clean and invalidate by set-way\nD-cache clean by MVA to PoC\nD-cache clean by MVA to PoU\nD-cache clean by set-way\nD-cache invalidate by MVA to PoC\nD-cache invalidate by set-way\nDisable the exception\nDisables counter\nDisables the cycle counter\nDisables D-cache if currently enabled.\nShorthand for <code>set_fpu_access_mode(FpuAccessMode::Disabled)</code>\nDisables I-cache if currently enabled.\nDisables SysTick interrupt\nDisables TRACE. See <code>DCB::enable_trace()</code> for more details\nAES ECB Mode Encryption\nEvent generator unit 0\nEvent generator unit 1\nEvent generator unit 2\nEvent generator unit 3\nEvent generator unit 4\nEvent generator unit 5\nEnable the exception\nEnables counter\nEnables the cycle counter\nEnables D-cache if currently disabled.\nShorthand for <code>set_fpu_access_mode(FpuAccessMode::Enabled)</code>\nEnables I-cache if currently disabled.\nEnables SysTick interrupt\nEnables TRACE. This is for example required by the …\nGet the total cycles spent in exception processing\nFactory information configuration registers\nGet the folded instruction count\nGets FPU access mode\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCommon register and bit access and modify traits\nGets clock source\nGets current value\nReturns the current clock cycle count\nReturns the NVIC priority of <code>interrupt</code>\nReturns the hardware priority of <code>system_handler</code>\nGets reload value\nReturns the reload value with which the counter would wrap …\nGPIO Tasks and Events\nReturns <code>true</code> if the implementation supports a cycle counter\nReturns <code>true</code> if the the implementation supports sampling …\nReturns <code>true</code> if the implementation includes external match …\nReturns <code>true</code> if the implementation the profiling counters\nChecks if an external reference clock is available\nChecks if the counter wrapped (underflowed) since the last …\nInter-IC Sound\nReturns whether the I-cache is currently enabled.\nI-cache invalidate all to PoU\nI-cache invalidate by MVA to PoU\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidates D-cache by address.\nInvalidates an object from the D-cache.\nInvalidates a slice from the D-cache.\nInvalidates the entire I-cache.\nIs <code>interrupt</code> active or pre-empted and stacked\nChecks if counter is enabled\nIs there a debugger attached? (see note)\nChecks if <code>interrupt</code> is enabled\nCheck if an exception is enabled\nChecks if SysTick interrupt is enabled\nChecks if <code>interrupt</code> is pending\nCheck if PENDSTSET bit in the ICSR register is set meaning …\nCheck if PENDSVSET bit in the ICSR register is set meaning …\nChecks if the calibration value is precise\nLow-power comparator\nGet the additional cycles required to execute all load or …\nDisables <code>interrupt</code>\nMemory Watch Unit\nNFC-A compatible radio\nNumber of comparators implemented\nNon Volatile Memory Controller\nGPIO Port 1\nGPIO Port 2\nPulse Density Modulation (Digital Microphone) Interface\nForces <code>interrupt</code> into pending state\nPower control\nProgrammable Peripheral Interconnect\nReturn the pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturns a pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nReturn the pointer to the register block\nPulse width modulation unit 0\nPulse width modulation unit 1\nPulse width modulation unit 2\nPulse width modulation unit 3\nQuadrature Decoder\n2.4 GHz radio\nRequest an IRQ in software\nRandom Number Generator\nReal time counter 0\nReal time counter 1\nReal time counter 2\nSuccessive approximation register (SAR) analog-to-digital …\nSelects the current CCSIDR\nSets clock source\nSet the CPI count\nSet the cycle count\nSet the exception count\nSet the folded instruction count\nSets FPU access mode\nSet the lsu count\nSet the PENDSTSET bit in the ICSR register which will pend …\nSet the PENDSVSET bit in the ICSR register which will pend …\nSets the “priority” of <code>interrupt</code> to <code>prio</code>\nSets the hardware priority of <code>system_handler</code> to <code>prio</code>\nSets reload value\nSet the sleep count\nSet the SLEEPDEEP bit in the SCR register\nSet the SLEEPONEXIT bit in the SCR register\nGet the total number of cycles that the processor is …\nSerial Peripheral Interface 0\nSerial Peripheral Interface 1\nSerial Peripheral Interface 2\nSerial Peripheral Interface Master with EasyDMA 0\nSerial Peripheral Interface Master with EasyDMA 1\nSerial Peripheral Interface Master with EasyDMA 2\nSerial Peripheral Interface Master with EasyDMA 3\nSPI Slave 0\nSPI Slave 1\nSPI Slave 2\nUnchecked version of <code>Peripherals::take</code>\nUnchecked version of <code>Peripherals::take</code>\nSoftware interrupt 0\nSoftware interrupt 1\nSoftware interrupt 2\nSoftware interrupt 3\nSoftware interrupt 4\nSoftware interrupt 5\nInitiate a system reset request to reset the MCU\nReturns all the core peripherals <em>once</em>\nReturns all the peripherals <em>once</em>\nTemperature Sensor\nTimer/Counter 0\nTimer/Counter 1\nTimer/Counter 2\nTimer/Counter 3\nTimer/Counter 4\nI2C compatible Two-Wire Interface 0\nI2C compatible Two-Wire Interface 1\nI2C compatible Two-Wire Master Interface with EasyDMA 0\nI2C compatible Two-Wire Master Interface with EasyDMA 1\nI2C compatible Two-Wire Slave Interface with EasyDMA 0\nI2C compatible Two-Wire Slave Interface with EasyDMA 1\nUniversal Asynchronous Receiver/Transmitter\nUART with EasyDMA 0\nUART with EasyDMA 1\nUser information configuration registers\nRemoves the software lock on the DWT\nEnables <code>interrupt</code>\nClears <code>interrupt</code>’s pending state\nUniversal serial bus device\nReturns the active exception number\nWatchdog Timer\nADDRPTR (rw) register accessor: an alias for …\nENABLE (rw) register accessor: an alias for …\nEVENTS_END (rw) register accessor: an alias for …\nEVENTS_NOTRESOLVED (rw) register accessor: an alias for …\nEVENTS_RESOLVED (rw) register accessor: an alias for …\nINTENCLR (rw) register accessor: an alias for …\nINTENSET (rw) register accessor: an alias for …\nIRKPTR (rw) register accessor: an alias for …\nNIRK (rw) register accessor: an alias for <code>Reg&lt;NIRK_SPEC&gt;</code>\nRegister block\nSCRATCHPTR (rw) register accessor: an alias for …\nSTATUS (r) register accessor: an alias for <code>Reg&lt;STATUS_SPEC&gt;</code>\nTASKS_START (w) register accessor: an alias for …\nTASKS_STOP (w) register accessor: an alias for …\nPointer to the resolvable address\n0x510 - Pointer to the resolvable address\nEnable AAR\n0x500 - Enable AAR\nAddress resolution procedure complete\n0x100 - Address resolution procedure complete\nAddress not resolved\n0x108 - Address not resolved\nAddress resolved\n0x104 - Address resolved\nReturns the argument unchanged.\nDisable interrupt\n0x308 - Disable interrupt\nEnable interrupt\n0x304 - Enable interrupt\nCalls <code>U::from(self)</code>.\nPointer to IRK data structure\n0x508 - Pointer to IRK data structure\nNumber of IRKs\n0x504 - Number of IRKs\nPointer to data area used for temporary storage\n0x514 - Pointer to data area used for temporary storage\nResolution status\n0x400 - Resolution status\nStart resolving addresses based on IRKs specified in the …\n0x00 - Start resolving addresses based on IRKs specified …\nStop resolving addresses\n0x08 - Stop resolving addresses\nField <code>ADDRPTR</code> reader - Pointer to the resolvable address …\nPointer to the resolvable address\nField <code>ADDRPTR</code> writer - Pointer to the resolvable address …\nRegister <code>ADDRPTR</code> reader\nRegister <code>ADDRPTR</code> writer\nBits 0:31 - Pointer to the resolvable address (6-bytes)\nBits 0:31 - Pointer to the resolvable address (6-bytes)\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n0: Disable\n3: Enable\nEnable or disable AAR\nField <code>ENABLE</code> reader - Enable or disable AAR\nEnable AAR\nField <code>ENABLE</code> writer - Enable or disable AAR\nRegister <code>ENABLE</code> reader\nRegister <code>ENABLE</code> writer\nWrites raw bits to the register.\nDisable\nBits 0:1 - Enable or disable AAR\nBits 0:1 - Enable or disable AAR\nEnable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\nAddress resolution procedure complete\nField <code>EVENTS_END</code> reader - Address resolution procedure …\nAddress resolution procedure complete\nField <code>EVENTS_END</code> writer - Address resolution procedure …\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_END</code> reader\nRegister <code>EVENTS_END</code> writer\nWrites raw bits to the register.\nBit 0 - Address resolution procedure complete\nBit 0 - Address resolution procedure complete\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nAddress not resolved\nField <code>EVENTS_NOTRESOLVED</code> reader - Address not resolved\nAddress not resolved\nField <code>EVENTS_NOTRESOLVED</code> writer - Address not resolved\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_NOTRESOLVED</code> reader\nRegister <code>EVENTS_NOTRESOLVED</code> writer\nWrites raw bits to the register.\nBit 0 - Address not resolved\nBit 0 - Address not resolved\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nAddress resolved\nField <code>EVENTS_RESOLVED</code> reader - Address resolved\nAddress resolved\nField <code>EVENTS_RESOLVED</code> writer - Address resolved\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_RESOLVED</code> reader\nRegister <code>EVENTS_RESOLVED</code> writer\nWrites raw bits to the register.\nBit 0 - Address resolved\nBit 0 - Address resolved\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\n1: Disable\n1: Disable\n1: Disable\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nWrite ‘1’ to disable interrupt for event END\nWrite ‘1’ to disable interrupt for event END\nField <code>END</code> reader - Write ‘1’ to disable interrupt for …\nField <code>END</code> writer - Write ‘1’ to disable interrupt for …\nDisable interrupt\nWrite ‘1’ to disable interrupt for event NOTRESOLVED\nWrite ‘1’ to disable interrupt for event NOTRESOLVED\nField <code>NOTRESOLVED</code> reader - Write ‘1’ to disable …\nField <code>NOTRESOLVED</code> writer - Write ‘1’ to disable …\nRegister <code>INTENCLR</code> reader\nWrite ‘1’ to disable interrupt for event RESOLVED\nWrite ‘1’ to disable interrupt for event RESOLVED\nField <code>RESOLVED</code> reader - Write ‘1’ to disable interrupt …\nField <code>RESOLVED</code> writer - Write ‘1’ to disable interrupt …\nRegister <code>INTENCLR</code> writer\nWrites raw bits to the register.\nDisable\nDisable\nDisable\nBit 0 - Write ‘1’ to disable interrupt for event END\nBit 0 - Write ‘1’ to disable interrupt for event END\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 2 - Write ‘1’ to disable interrupt for event …\nBit 2 - Write ‘1’ to disable interrupt for event …\nBit 1 - Write ‘1’ to disable interrupt for event …\nBit 1 - Write ‘1’ to disable interrupt for event …\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nWrite ‘1’ to enable interrupt for event END\nWrite ‘1’ to enable interrupt for event END\nField <code>END</code> reader - Write ‘1’ to enable interrupt for …\nField <code>END</code> writer - Write ‘1’ to enable interrupt for …\nEnable interrupt\nWrite ‘1’ to enable interrupt for event NOTRESOLVED\nWrite ‘1’ to enable interrupt for event NOTRESOLVED\nField <code>NOTRESOLVED</code> reader - Write ‘1’ to enable …\nField <code>NOTRESOLVED</code> writer - Write ‘1’ to enable …\nRegister <code>INTENSET</code> reader\nWrite ‘1’ to enable interrupt for event RESOLVED\nWrite ‘1’ to enable interrupt for event RESOLVED\nField <code>RESOLVED</code> reader - Write ‘1’ to enable interrupt …\nField <code>RESOLVED</code> writer - Write ‘1’ to enable interrupt …\n1: Enable\n1: Enable\n1: Enable\nRegister <code>INTENSET</code> writer\nWrites raw bits to the register.\nBit 0 - Write ‘1’ to enable interrupt for event END\nBit 0 - Write ‘1’ to enable interrupt for event END\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 2 - Write ‘1’ to enable interrupt for event …\nBit 2 - Write ‘1’ to enable interrupt for event …\nBit 1 - Write ‘1’ to enable interrupt for event …\nBit 1 - Write ‘1’ to enable interrupt for event …\nEnable\nEnable\nEnable\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>IRKPTR</code> reader - Pointer to the IRK data structure\nPointer to IRK data structure\nField <code>IRKPTR</code> writer - Pointer to the IRK data structure\nRegister <code>IRKPTR</code> reader\nRegister <code>IRKPTR</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Pointer to the IRK data structure\nBits 0:31 - Pointer to the IRK data structure\nField <code>NIRK</code> reader - Number of Identity root keys available …\nNumber of IRKs\nField <code>NIRK</code> writer - Number of Identity root keys available …\nRegister <code>NIRK</code> reader\nRegister <code>NIRK</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:4 - Number of Identity root keys available in the …\nBits 0:4 - Number of Identity root keys available in the …\nRegister <code>SCRATCHPTR</code> reader\nField <code>SCRATCHPTR</code> reader - Pointer to a scratch data area …\nPointer to data area used for temporary storage\nField <code>SCRATCHPTR</code> writer - Pointer to a scratch data area …\nRegister <code>SCRATCHPTR</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Pointer to a scratch data area used for …\nBits 0:31 - Pointer to a scratch data area used for …\nRegister <code>STATUS</code> reader\nField <code>STATUS</code> reader - The IRK that was used last time an …\nResolution status\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:3 - The IRK that was used last time an address was …\nStart resolving addresses based on IRKs specified in the …\nStart resolving addresses based on IRKs specified in the …\nField <code>TASKS_START</code> writer - Start resolving addresses based …\n1: Trigger task\nRegister <code>TASKS_START</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Start resolving addresses based on IRKs specified …\nTrigger task\nStop resolving addresses\nStop resolving addresses\nField <code>TASKS_STOP</code> writer - Stop resolving addresses\n1: Trigger task\nRegister <code>TASKS_STOP</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Stop resolving addresses\nTrigger task\nUnspecified\nRegister block\nCluster Unspecified\n0x800..0x80c - Unspecified\n0x810..0x81c - Unspecified\n0x820..0x82c - Unspecified\n0x830..0x83c - Unspecified\n0x840..0x84c - Unspecified\n0x850..0x85c - Unspecified\n0x860..0x86c - Unspecified\n0x870..0x87c - Unspecified\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRegister block\nADDR (rw) register accessor: an alias for <code>Reg&lt;ADDR_SPEC&gt;</code>\nPERM (rw) register accessor: an alias for <code>Reg&lt;PERM_SPEC&gt;</code>\nSIZE (rw) register accessor: an alias for <code>Reg&lt;SIZE_SPEC&gt;</code>\nDescription cluster: Configure the word-aligned start …\n0x00 - Description cluster: Configure the word-aligned …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDescription cluster: Access permissions for region n as …\n0x08 - Description cluster: Access permissions for region …\nDescription cluster: Size of region to protect counting …\n0x04 - Description cluster: Size of region to protect …\nField <code>ADDR</code> reader - Valid word-aligned start address of …\nDescription cluster: Configure the word-aligned start …\nField <code>ADDR</code> writer - Valid word-aligned start address of …\nRegister <code>ADDR</code> reader\nRegister <code>ADDR</code> writer\nBits 0:31 - Valid word-aligned start address of region n …\nBits 0:31 - Valid word-aligned start address of region n …\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n1: Block write and erase instructions to region n\n1: Block read instructions to region n\n0: Allow write and erase instructions to region n\n0: Allow read instructions to region n\nDescription cluster: Access permissions for region n as …\nRegister <code>PERM</code> reader\nConfigure read permissions for region n. Write ‘0’ has …\nField <code>READ</code> reader - Configure read permissions for region …\nField <code>READ</code> writer - Configure read permissions for region …\nRegister <code>PERM</code> writer\nConfigure write and erase permissions for region n. Write …\nField <code>WRITE</code> reader - Configure write and erase permissions …\nField <code>WRITE</code> writer - Configure write and erase permissions …\nWrites raw bits to the register.\nBlock write and erase instructions to region n\nBlock read instructions to region n\nAllow write and erase instructions to region n\nAllow read instructions to region n\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>DISABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nChecks if the value of the field is <code>ENABLE</code>\nBit 2 - Configure read permissions for region n. Write ‘0…\nBit 2 - Configure read permissions for region n. Write ‘0…\nGet enumerated values variant\nGet enumerated values variant\nBit 1 - Configure write and erase permissions for region …\nBit 1 - Configure write and erase permissions for region …\nRegister <code>SIZE</code> reader\nField <code>SIZE</code> reader - Size of flash region n in bytes. Must …\nDescription cluster: Size of region to protect counting …\nField <code>SIZE</code> writer - Size of flash region n in bytes. Must …\nRegister <code>SIZE</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Size of flash region n in bytes. Must be a …\nBits 0:31 - Size of flash region n in bytes. Must be a …\nCNFPTR (rw) register accessor: an alias for …\nENABLE (rw) register accessor: an alias for …\nEVENTS_ENDCRYPT (rw) register accessor: an alias for …\nEVENTS_ENDKSGEN (rw) register accessor: an alias for …\nEVENTS_ERROR (rw) register accessor: an alias for …\nINPTR (rw) register accessor: an alias for <code>Reg&lt;INPTR_SPEC&gt;</code>\nINTENCLR (rw) register accessor: an alias for …\nINTENSET (rw) register accessor: an alias for …\nMAXPACKETSIZE (rw) register accessor: an alias for …\nMICSTATUS (r) register accessor: an alias for …\nMODE (rw) register accessor: an alias for <code>Reg&lt;MODE_SPEC&gt;</code>\nOUTPTR (rw) register accessor: an alias for …\nRATEOVERRIDE (rw) register accessor: an alias for …\nRegister block\nSCRATCHPTR (rw) register accessor: an alias for …\nSHORTS (rw) register accessor: an alias for …\nTASKS_CRYPT (w) register accessor: an alias for …\nTASKS_KSGEN (w) register accessor: an alias for …\nTASKS_RATEOVERRIDE (w) register accessor: an alias for …\nTASKS_STOP (w) register accessor: an alias for …\nPointer to data structure holding AES key and NONCE vector\n0x508 - Pointer to data structure holding AES key and …\nEnable\n0x500 - Enable\nEncrypt/decrypt complete\n0x104 - Encrypt/decrypt complete\nKey-stream generation complete\n0x100 - Key-stream generation complete\nDeprecated register - CCM error event\n0x108 - Deprecated register - CCM error event\nReturns the argument unchanged.\nInput pointer\n0x50c - Input pointer\nDisable interrupt\n0x308 - Disable interrupt\nEnable interrupt\n0x304 - Enable interrupt\nCalls <code>U::from(self)</code>.\nLength of key-stream generated when MODE.LENGTH = Extended.\n0x518 - Length of key-stream generated when MODE.LENGTH = …\nMIC check result\n0x400 - MIC check result\nOperation mode\n0x504 - Operation mode\nOutput pointer\n0x510 - Output pointer\nData rate override setting.\n0x51c - Data rate override setting.\nPointer to data area used for temporary storage\n0x514 - Pointer to data area used for temporary storage\nShortcuts between local events and tasks\n0x200 - Shortcuts between local events and tasks\nStart encryption/decryption. This operation will stop by …\n0x04 - Start encryption/decryption. This operation will …\nStart generation of key-stream. This operation will stop …\n0x00 - Start generation of key-stream. This operation will …\nOverride DATARATE setting in MODE register with the …\n0x0c - Override DATARATE setting in MODE register with the …\nStop encryption/decryption\n0x08 - Stop encryption/decryption\nField <code>CNFPTR</code> reader - Pointer to the data structure …\nPointer to data structure holding AES key and NONCE vector\nField <code>CNFPTR</code> writer - Pointer to the data structure …\nRegister <code>CNFPTR</code> reader\nRegister <code>CNFPTR</code> writer\nWrites raw bits to the register.\nBits 0:31 - Pointer to the data structure holding the AES …\nBits 0:31 - Pointer to the data structure holding the AES …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n0: Disable\n2: Enable\nEnable or disable CCM\nField <code>ENABLE</code> reader - Enable or disable CCM\nEnable\nField <code>ENABLE</code> writer - Enable or disable CCM\nRegister <code>ENABLE</code> reader\nRegister <code>ENABLE</code> writer\nWrites raw bits to the register.\nDisable\nBits 0:1 - Enable or disable CCM\nBits 0:1 - Enable or disable CCM\nEnable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\nEncrypt/decrypt complete\nField <code>EVENTS_ENDCRYPT</code> reader - Encrypt/decrypt complete\nEncrypt/decrypt complete\nField <code>EVENTS_ENDCRYPT</code> writer - Encrypt/decrypt complete\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_ENDCRYPT</code> reader\nRegister <code>EVENTS_ENDCRYPT</code> writer\nWrites raw bits to the register.\nBit 0 - Encrypt/decrypt complete\nBit 0 - Encrypt/decrypt complete\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nKey-stream generation complete\nField <code>EVENTS_ENDKSGEN</code> reader - Key-stream generation …\nKey-stream generation complete\nField <code>EVENTS_ENDKSGEN</code> writer - Key-stream generation …\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_ENDKSGEN</code> reader\nRegister <code>EVENTS_ENDKSGEN</code> writer\nWrites raw bits to the register.\nBit 0 - Key-stream generation complete\nBit 0 - Key-stream generation complete\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nDeprecated field - CCM error event\nField <code>EVENTS_ERROR</code> reader - Deprecated field - CCM error …\nDeprecated register - CCM error event\nField <code>EVENTS_ERROR</code> writer - Deprecated field - CCM error …\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_ERROR</code> reader\nRegister <code>EVENTS_ERROR</code> writer\nWrites raw bits to the register.\nBit 0 - Deprecated field - CCM error event\nBit 0 - Deprecated field - CCM error event\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nField <code>INPTR</code> reader - Input pointer\nInput pointer\nField <code>INPTR</code> writer - Input pointer\nRegister <code>INPTR</code> reader\nRegister <code>INPTR</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBits 0:31 - Input pointer\nBits 0:31 - Input pointer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n1: Disable\n1: Disable\n1: Disable\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nWrite ‘1’ to disable interrupt for event ENDCRYPT\nWrite ‘1’ to disable interrupt for event ENDCRYPT\nField <code>ENDCRYPT</code> reader - Write ‘1’ to disable interrupt …\nField <code>ENDCRYPT</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for event ENDKSGEN\nWrite ‘1’ to disable interrupt for event ENDKSGEN\nField <code>ENDKSGEN</code> reader - Write ‘1’ to disable interrupt …\nField <code>ENDKSGEN</code> writer - Write ‘1’ to disable interrupt …\nDeprecated intclrfield - Write ‘1’ to disable …\nDeprecated intclrfield - Write ‘1’ to disable …\nField <code>ERROR</code> reader - Deprecated intclrfield - Write ‘1’…\nField <code>ERROR</code> writer - Deprecated intclrfield - Write ‘1’…\nDisable interrupt\nRegister <code>INTENCLR</code> reader\nRegister <code>INTENCLR</code> writer\nWrites raw bits to the register.\nDisable\nDisable\nDisable\nBit 1 - Write ‘1’ to disable interrupt for event …\nBit 1 - Write ‘1’ to disable interrupt for event …\nBit 0 - Write ‘1’ to disable interrupt for event …\nBit 0 - Write ‘1’ to disable interrupt for event …\nBit 2 - Deprecated intclrfield - Write ‘1’ to disable …\nBit 2 - Deprecated intclrfield - Write ‘1’ to disable …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nWrite ‘1’ to enable interrupt for event ENDCRYPT\nWrite ‘1’ to enable interrupt for event ENDCRYPT\nField <code>ENDCRYPT</code> reader - Write ‘1’ to enable interrupt …\nField <code>ENDCRYPT</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for event ENDKSGEN\nWrite ‘1’ to enable interrupt for event ENDKSGEN\nField <code>ENDKSGEN</code> reader - Write ‘1’ to enable interrupt …\nField <code>ENDKSGEN</code> writer - Write ‘1’ to enable interrupt …\nDeprecated intsetfield - Write ‘1’ to enable interrupt …\nDeprecated intsetfield - Write ‘1’ to enable interrupt …\nField <code>ERROR</code> reader - Deprecated intsetfield - Write ‘1’…\nField <code>ERROR</code> writer - Deprecated intsetfield - Write ‘1’…\nEnable interrupt\nRegister <code>INTENSET</code> reader\n1: Enable\n1: Enable\n1: Enable\nRegister <code>INTENSET</code> writer\nWrites raw bits to the register.\nBit 1 - Write ‘1’ to enable interrupt for event …\nBit 1 - Write ‘1’ to enable interrupt for event …\nBit 0 - Write ‘1’ to enable interrupt for event …\nBit 0 - Write ‘1’ to enable interrupt for event …\nBit 2 - Deprecated intsetfield - Write ‘1’ to enable …\nBit 2 - Deprecated intsetfield - Write ‘1’ to enable …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nEnable\nEnable\nEnable\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>MAXPACKETSIZE</code> reader - Length of key-stream …\nLength of key-stream generated when MODE.LENGTH = Extended.\nField <code>MAXPACKETSIZE</code> writer - Length of key-stream …\nRegister <code>MAXPACKETSIZE</code> reader\nRegister <code>MAXPACKETSIZE</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:7 - Length of key-stream generated when MODE.LENGTH …\nBits 0:7 - Length of key-stream generated when MODE.LENGTH …\n0: MIC check failed\n1: MIC check passed\nThe result of the MIC check performed during the previous …\nField <code>MICSTATUS</code> reader - The result of the MIC check …\nMIC check result\nRegister <code>MICSTATUS</code> reader\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>CHECK_FAILED</code>\nChecks if the value of the field is <code>CHECK_PASSED</code>\nBit 0 - The result of the MIC check performed during the …\nGet enumerated values variant\nRadio data rate that the CCM shall run synchronous with\nField <code>DATARATE</code> reader - Radio data rate that the CCM shall …\nField <code>DATARATE</code> writer - Radio data rate that the CCM shall …\n1: AES CCM packet decryption mode\n0: Default length. Effective length of LENGTH field in …\n0: AES CCM packet encryption mode\n1: Extended length. Effective length of LENGTH field in …\nPacket length configuration\nField <code>LENGTH</code> reader - Packet length configuration\nField <code>LENGTH</code> writer - Packet length configuration\nThe mode of operation to be used. The settings in this …\nField <code>MODE</code> reader - The mode of operation to be used. The …\nOperation mode\nField <code>MODE</code> writer - The mode of operation to be used. The …\nRegister <code>MODE</code> reader\nRegister <code>MODE</code> writer\n2: 125 Kbps\n125 Kbps\n0: 1 Mbps\n1 Mbps\n1: 2 Mbps\n2 Mbps\n3: 500 Kbps\n500 Kbps\nWrites raw bits to the register.\nBits 16:17 - Radio data rate that the CCM shall run …\nBits 16:17 - Radio data rate that the CCM shall run …\nAES CCM packet decryption mode\nDefault length. Effective length of LENGTH field in …\nAES CCM packet encryption mode\nExtended length. Effective length of LENGTH field in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>_125KBPS</code>\nChecks if the value of the field is <code>_1MBIT</code>\nChecks if the value of the field is <code>_2MBIT</code>\nChecks if the value of the field is <code>_500KBPS</code>\nChecks if the value of the field is <code>DECRYPTION</code>\nChecks if the value of the field is <code>DEFAULT</code>\nChecks if the value of the field is <code>ENCRYPTION</code>\nChecks if the value of the field is <code>EXTENDED</code>\nBit 24 - Packet length configuration\nBit 24 - Packet length configuration\nBit 0 - The mode of operation to be used. The settings in …\nBit 0 - The mode of operation to be used. The settings in …\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nField <code>OUTPTR</code> reader - Output pointer\nOutput pointer\nField <code>OUTPTR</code> writer - Output pointer\nRegister <code>OUTPTR</code> reader\nRegister <code>OUTPTR</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Output pointer\nBits 0:31 - Output pointer\nRegister <code>RATEOVERRIDE</code> reader\nData rate override setting.\nField <code>RATEOVERRIDE</code> reader - Data rate override setting.\nData rate override setting.\nField <code>RATEOVERRIDE</code> writer - Data rate override setting.\nRegister <code>RATEOVERRIDE</code> writer\n2: 125 Kbps\n125 Kbps\n0: 1 Mbps\n1 Mbps\n1: 2 Mbps\n2 Mbps\n3: 500 Kbps\n500 Kbps\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>_125KBPS</code>\nChecks if the value of the field is <code>_1MBIT</code>\nChecks if the value of the field is <code>_2MBIT</code>\nChecks if the value of the field is <code>_500KBPS</code>\nBits 0:1 - Data rate override setting.\nBits 0:1 - Data rate override setting.\nGet enumerated values variant\nRegister <code>SCRATCHPTR</code> reader\nField <code>SCRATCHPTR</code> reader - Pointer to a scratch data area …\nPointer to data area used for temporary storage\nField <code>SCRATCHPTR</code> writer - Pointer to a scratch data area …\nRegister <code>SCRATCHPTR</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:31 - Pointer to a scratch data area used for …\nBits 0:31 - Pointer to a scratch data area used for …\n0: Disable shortcut\n1: Enable shortcut\nShortcut between event ENDKSGEN and task CRYPT\nField <code>ENDKSGEN_CRYPT</code> reader - Shortcut between event …\nField <code>ENDKSGEN_CRYPT</code> writer - Shortcut between event …\nRegister <code>SHORTS</code> reader\nShortcuts between local events and tasks\nRegister <code>SHORTS</code> writer\nWrites raw bits to the register.\nDisable shortcut\nEnable shortcut\nBit 0 - Shortcut between event ENDKSGEN and task CRYPT\nBit 0 - Shortcut between event ENDKSGEN and task CRYPT\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\nStart encryption/decryption. This operation will stop by …\nStart encryption/decryption. This operation will stop by …\nField <code>TASKS_CRYPT</code> writer - Start encryption/decryption. …\n1: Trigger task\nRegister <code>TASKS_CRYPT</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Start encryption/decryption. This operation will …\nTrigger task\nStart generation of key-stream. This operation will stop …\nStart generation of key-stream. This operation will stop …\nField <code>TASKS_KSGEN</code> writer - Start generation of key-stream. …\n1: Trigger task\nRegister <code>TASKS_KSGEN</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Start generation of key-stream. This operation …\nTrigger task\nOverride DATARATE setting in MODE register with the …\nOverride DATARATE setting in MODE register with the …\nField <code>TASKS_RATEOVERRIDE</code> writer - Override DATARATE …\n1: Trigger task\nRegister <code>TASKS_RATEOVERRIDE</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Override DATARATE setting in MODE register with …\nTrigger task\nStop encryption/decryption\nStop encryption/decryption\nField <code>TASKS_STOP</code> writer - Stop encryption/decryption\n1: Trigger task\nRegister <code>TASKS_STOP</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Stop encryption/decryption\nTrigger task\nCTIV (rw) register accessor: an alias for <code>Reg&lt;CTIV_SPEC&gt;</code>\nEVENTS_CTSTARTED (rw) register accessor: an alias for …\nEVENTS_CTSTOPPED (rw) register accessor: an alias for …\nEVENTS_CTTO (rw) register accessor: an alias for …\nEVENTS_DONE (rw) register accessor: an alias for …\nEVENTS_HFCLKSTARTED (rw) register accessor: an alias for …\nEVENTS_LFCLKSTARTED (rw) register accessor: an alias for …\nHFCLKRUN (r) register accessor: an alias for …\nHFCLKSTAT (r) register accessor: an alias for …\nHFXODEBOUNCE (rw) register accessor: an alias for …\nINTENCLR (rw) register accessor: an alias for …\nINTENSET (rw) register accessor: an alias for …\nLFCLKRUN (r) register accessor: an alias for …\nLFCLKSRC (rw) register accessor: an alias for …\nLFCLKSRCCOPY (r) register accessor: an alias for …\nLFCLKSTAT (r) register accessor: an alias for …\nLFXODEBOUNCE (rw) register accessor: an alias for …\nRegister block\nTASKS_CAL (w) register accessor: an alias for …\nTASKS_CTSTART (w) register accessor: an alias for …\nTASKS_CTSTOP (w) register accessor: an alias for …\nTASKS_HFCLKSTART (w) register accessor: an alias for …\nTASKS_HFCLKSTOP (w) register accessor: an alias for …\nTASKS_LFCLKSTART (w) register accessor: an alias for …\nTASKS_LFCLKSTOP (w) register accessor: an alias for …\nTRACECONFIG (rw) register accessor: an alias for …\nCalibration timer interval\n0x538 - Calibration timer interval\nCalibration timer has been started and is ready to process …\n0x128 - Calibration timer has been started and is ready to …\nCalibration timer has been stopped and is ready to process …\n0x12c - Calibration timer has been stopped and is ready to …\nCalibration timer timeout\n0x110 - Calibration timer timeout\nCalibration of LFRC completed\n0x10c - Calibration of LFRC completed\nHFXO crystal oscillator started\n0x100 - HFXO crystal oscillator started\nLFCLK started\n0x104 - LFCLK started\nReturns the argument unchanged.\nStatus indicating that HFCLKSTART task has been triggered\n0x408 - Status indicating that HFCLKSTART task has been …\nHFCLK status\n0x40c - HFCLK status\nHFXO debounce time. The HFXO is started by triggering the …\n0x528 - HFXO debounce time. The HFXO is started by …\nDisable interrupt\n0x308 - Disable interrupt\nEnable interrupt\n0x304 - Enable interrupt\nCalls <code>U::from(self)</code>.\nStatus indicating that LFCLKSTART task has been triggered\n0x414 - Status indicating that LFCLKSTART task has been …\nClock source for the LFCLK\n0x518 - Clock source for the LFCLK\nCopy of LFCLKSRC register, set when LFCLKSTART task was …\n0x41c - Copy of LFCLKSRC register, set when LFCLKSTART …\nLFCLK status\n0x418 - LFCLK status\nLFXO debounce time. The LFXO is started by triggering the …\n0x52c - LFXO debounce time. The LFXO is started by …\nStart calibration of LFRC\n0x10 - Start calibration of LFRC\nStart calibration timer\n0x14 - Start calibration timer\nStop calibration timer\n0x18 - Stop calibration timer\nStart HFXO crystal oscillator\n0x00 - Start HFXO crystal oscillator\nStop HFXO crystal oscillator\n0x04 - Stop HFXO crystal oscillator\nStart LFCLK\n0x08 - Start LFCLK\nStop LFCLK\n0x0c - Stop LFCLK\nClocking options for the trace port debug interface\n0x55c - Clocking options for the trace port debug interface\nField <code>CTIV</code> reader - Calibration timer interval in multiple …\nCalibration timer interval\nField <code>CTIV</code> writer - Calibration timer interval in multiple …\nRegister <code>CTIV</code> reader\nRegister <code>CTIV</code> writer\nWrites raw bits to the register.\nBits 0:6 - Calibration timer interval in multiple of 0.25 …\nBits 0:6 - Calibration timer interval in multiple of 0.25 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalibration timer has been started and is ready to process …\nField <code>EVENTS_CTSTARTED</code> reader - Calibration timer has been …\nCalibration timer has been started and is ready to process …\nField <code>EVENTS_CTSTARTED</code> writer - Calibration timer has been …\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_CTSTARTED</code> reader\nRegister <code>EVENTS_CTSTARTED</code> writer\nWrites raw bits to the register.\nBit 0 - Calibration timer has been started and is ready to …\nBit 0 - Calibration timer has been started and is ready to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nCalibration timer has been stopped and is ready to process …\nField <code>EVENTS_CTSTOPPED</code> reader - Calibration timer has been …\nCalibration timer has been stopped and is ready to process …\nField <code>EVENTS_CTSTOPPED</code> writer - Calibration timer has been …\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_CTSTOPPED</code> reader\nRegister <code>EVENTS_CTSTOPPED</code> writer\nWrites raw bits to the register.\nBit 0 - Calibration timer has been stopped and is ready to …\nBit 0 - Calibration timer has been stopped and is ready to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nCalibration timer timeout\nField <code>EVENTS_CTTO</code> reader - Calibration timer timeout\nCalibration timer timeout\nField <code>EVENTS_CTTO</code> writer - Calibration timer timeout\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_CTTO</code> reader\nRegister <code>EVENTS_CTTO</code> writer\nWrites raw bits to the register.\nBit 0 - Calibration timer timeout\nBit 0 - Calibration timer timeout\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nCalibration of LFRC completed\nField <code>EVENTS_DONE</code> reader - Calibration of LFRC completed\nCalibration of LFRC completed\nField <code>EVENTS_DONE</code> writer - Calibration of LFRC completed\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_DONE</code> reader\nRegister <code>EVENTS_DONE</code> writer\nWrites raw bits to the register.\nBit 0 - Calibration of LFRC completed\nBit 0 - Calibration of LFRC completed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nHFXO crystal oscillator started\nField <code>EVENTS_HFCLKSTARTED</code> reader - HFXO crystal oscillator …\nHFXO crystal oscillator started\nField <code>EVENTS_HFCLKSTARTED</code> writer - HFXO crystal oscillator …\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_HFCLKSTARTED</code> reader\nRegister <code>EVENTS_HFCLKSTARTED</code> writer\nWrites raw bits to the register.\nBit 0 - HFXO crystal oscillator started\nBit 0 - HFXO crystal oscillator started\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nLFCLK started\nField <code>EVENTS_LFCLKSTARTED</code> reader - LFCLK started\nLFCLK started\nField <code>EVENTS_LFCLKSTARTED</code> writer - LFCLK started\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_LFCLKSTARTED</code> reader\nRegister <code>EVENTS_LFCLKSTARTED</code> writer\nWrites raw bits to the register.\nBit 0 - LFCLK started\nBit 0 - LFCLK started\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nStatus indicating that HFCLKSTART task has been triggered\n0: Task not triggered\nRegister <code>HFCLKRUN</code> reader\nHFCLKSTART task triggered or not\nField <code>STATUS</code> reader - HFCLKSTART task triggered or not\n1: Task triggered\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>NOT_TRIGGERED</code>\nChecks if the value of the field is <code>TRIGGERED</code>\nBit 0 - HFCLKSTART task triggered or not\nGet enumerated values variant\nHFCLK status\n0: HFCLK not running\nRegister <code>HFCLKSTAT</code> reader\n0: 64 MHz internal oscillator (HFINT)\n1: HFCLK running\nSource of HFCLK\nField <code>SRC</code> reader - Source of HFCLK\nHFCLK state\nField <code>STATE</code> reader - HFCLK state\n1: 64 MHz crystal oscillator (HFXO)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>NOT_RUNNING</code>\nChecks if the value of the field is <code>RC</code>\nChecks if the value of the field is <code>RUNNING</code>\nChecks if the value of the field is <code>XTAL</code>\nBit 0 - Source of HFCLK\nBit 16 - HFCLK state\nGet enumerated values variant\nGet enumerated values variant\n64: 1024 us debounce time. Recommended for 1.6 mm x 1.2 mm …\n16: 256 us debounce time. Recommended for 1.6 mm x 2.0 mm …\nHFXO debounce time. Debounce time = HFXODEBOUNCE * 16 us.\nField <code>HFXODEBOUNCE</code> reader - HFXO debounce time. Debounce …\nHFXO debounce time. The HFXO is started by triggering the …\nField <code>HFXODEBOUNCE</code> writer - HFXO debounce time. Debounce …\nRegister <code>HFXODEBOUNCE</code> reader\nRegister <code>HFXODEBOUNCE</code> writer\nWrites raw bits to the register.\n1024 us debounce time. Recommended for 1.6 mm x 1.2 mm …\n256 us debounce time. Recommended for 1.6 mm x 2.0 mm …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBits 0:7 - HFXO debounce time. Debounce time = …\nBits 0:7 - HFXO debounce time. Debounce time = …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DB1024US</code>\nChecks if the value of the field is <code>DB256US</code>\nGet enumerated values variant\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\n1: Disable\nWrite ‘1’ to disable interrupt for event CTSTARTED\nWrite ‘1’ to disable interrupt for event CTSTARTED\nField <code>CTSTARTED</code> reader - Write ‘1’ to disable …\nField <code>CTSTARTED</code> writer - Write ‘1’ to disable …\nWrite ‘1’ to disable interrupt for event CTSTOPPED\nWrite ‘1’ to disable interrupt for event CTSTOPPED\nField <code>CTSTOPPED</code> reader - Write ‘1’ to disable …\nField <code>CTSTOPPED</code> writer - Write ‘1’ to disable …\nWrite ‘1’ to disable interrupt for event CTTO\nWrite ‘1’ to disable interrupt for event CTTO\nField <code>CTTO</code> reader - Write ‘1’ to disable interrupt for …\nField <code>CTTO</code> writer - Write ‘1’ to disable interrupt for …\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\nWrite ‘1’ to disable interrupt for event DONE\nWrite ‘1’ to disable interrupt for event DONE\nField <code>DONE</code> reader - Write ‘1’ to disable interrupt for …\nField <code>DONE</code> writer - Write ‘1’ to disable interrupt for …\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nWrite ‘1’ to disable interrupt for event HFCLKSTARTED\nWrite ‘1’ to disable interrupt for event HFCLKSTARTED\nField <code>HFCLKSTARTED</code> reader - Write ‘1’ to disable …\nField <code>HFCLKSTARTED</code> writer - Write ‘1’ to disable …\nDisable interrupt\nWrite ‘1’ to disable interrupt for event LFCLKSTARTED\nWrite ‘1’ to disable interrupt for event LFCLKSTARTED\nField <code>LFCLKSTARTED</code> reader - Write ‘1’ to disable …\nField <code>LFCLKSTARTED</code> writer - Write ‘1’ to disable …\nRegister <code>INTENCLR</code> reader\nRegister <code>INTENCLR</code> writer\nWrites raw bits to the register.\nDisable\nDisable\nDisable\nDisable\nDisable\nDisable\nBit 10 - Write ‘1’ to disable interrupt for event …\nBit 10 - Write ‘1’ to disable interrupt for event …\nBit 11 - Write ‘1’ to disable interrupt for event …\nBit 11 - Write ‘1’ to disable interrupt for event …\nBit 4 - Write ‘1’ to disable interrupt for event CTTO\nBit 4 - Write ‘1’ to disable interrupt for event CTTO\nBit 3 - Write ‘1’ to disable interrupt for event DONE\nBit 3 - Write ‘1’ to disable interrupt for event DONE\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBit 0 - Write ‘1’ to disable interrupt for event …\nBit 0 - Write ‘1’ to disable interrupt for event …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 1 - Write ‘1’ to disable interrupt for event …\nBit 1 - Write ‘1’ to disable interrupt for event …\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nWrite ‘1’ to enable interrupt for event CTSTARTED\nWrite ‘1’ to enable interrupt for event CTSTARTED\nField <code>CTSTARTED</code> reader - Write ‘1’ to enable interrupt …\nField <code>CTSTARTED</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for event CTSTOPPED\nWrite ‘1’ to enable interrupt for event CTSTOPPED\nField <code>CTSTOPPED</code> reader - Write ‘1’ to enable interrupt …\nField <code>CTSTOPPED</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for event CTTO\nWrite ‘1’ to enable interrupt for event CTTO\nField <code>CTTO</code> reader - Write ‘1’ to enable interrupt for …\nField <code>CTTO</code> writer - Write ‘1’ to enable interrupt for …\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\nWrite ‘1’ to enable interrupt for event DONE\nWrite ‘1’ to enable interrupt for event DONE\nField <code>DONE</code> reader - Write ‘1’ to enable interrupt for …\nField <code>DONE</code> writer - Write ‘1’ to enable interrupt for …\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nWrite ‘1’ to enable interrupt for event HFCLKSTARTED\nWrite ‘1’ to enable interrupt for event HFCLKSTARTED\nField <code>HFCLKSTARTED</code> reader - Write ‘1’ to enable …\nField <code>HFCLKSTARTED</code> writer - Write ‘1’ to enable …\nEnable interrupt\nWrite ‘1’ to enable interrupt for event LFCLKSTARTED\nWrite ‘1’ to enable interrupt for event LFCLKSTARTED\nField <code>LFCLKSTARTED</code> reader - Write ‘1’ to enable …\nField <code>LFCLKSTARTED</code> writer - Write ‘1’ to enable …\nRegister <code>INTENSET</code> reader\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\nRegister <code>INTENSET</code> writer\nWrites raw bits to the register.\nBit 10 - Write ‘1’ to enable interrupt for event …\nBit 10 - Write ‘1’ to enable interrupt for event …\nBit 11 - Write ‘1’ to enable interrupt for event …\nBit 11 - Write ‘1’ to enable interrupt for event …\nBit 4 - Write ‘1’ to enable interrupt for event CTTO\nBit 4 - Write ‘1’ to enable interrupt for event CTTO\nBit 3 - Write ‘1’ to enable interrupt for event DONE\nBit 3 - Write ‘1’ to enable interrupt for event DONE\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBit 0 - Write ‘1’ to enable interrupt for event …\nBit 0 - Write ‘1’ to enable interrupt for event …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 1 - Write ‘1’ to enable interrupt for event …\nBit 1 - Write ‘1’ to enable interrupt for event …\nEnable\nEnable\nEnable\nEnable\nEnable\nEnable\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nStatus indicating that LFCLKSTART task has been triggered\n0: Task not triggered\nRegister <code>LFCLKRUN</code> reader\nLFCLKSTART task triggered or not\nField <code>STATUS</code> reader - LFCLKSTART task triggered or not\n1: Task triggered\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>NOT_TRIGGERED</code>\nChecks if the value of the field is <code>TRIGGERED</code>\nBit 0 - LFCLKSTART task triggered or not\nGet enumerated values variant\nEnable or disable bypass of LFCLK crystal oscillator with …\nField <code>BYPASS</code> reader - Enable or disable bypass of LFCLK …\nField <code>BYPASS</code> writer - Enable or disable bypass of LFCLK …\n0: Disable (use with Xtal or low-swing external source)\n0: Disable external source (use with Xtal)\n1: Enable (use with rail-to-rail external source)\n1: Enable use of external source instead of Xtal (SRC …\nEnable or disable external source for LFCLK\nField <code>EXTERNAL</code> reader - Enable or disable external source …\nField <code>EXTERNAL</code> writer - Enable or disable external source …\nClock source for the LFCLK\nRegister <code>LFCLKSRC</code> reader\n0: 32.768 kHz RC oscillator (LFRC)\nClock source\nField <code>SRC</code> reader - Clock source\nField <code>SRC</code> writer - Clock source\n2: 32.768 kHz synthesized from HFCLK (LFSYNT)\nRegister <code>LFCLKSRC</code> writer\n1: 32.768 kHz crystal oscillator (LFXO)\nWrites raw bits to the register.\nBit 16 - Enable or disable bypass of LFCLK crystal …\nBit 16 - Enable or disable bypass of LFCLK crystal …\nDisable (use with Xtal or low-swing external source)\nDisable external source (use with Xtal)\nEnable (use with rail-to-rail external source)\nEnable use of external source instead of Xtal (SRC needs …\nBit 17 - Enable or disable external source for LFCLK\nBit 17 - Enable or disable external source for LFCLK\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>RC</code>\nChecks if the value of the field is <code>SYNTH</code>\nChecks if the value of the field is <code>XTAL</code>\n32.768 kHz RC oscillator (LFRC)\nBits 0:1 - Clock source\nBits 0:1 - Clock source\n32.768 kHz synthesized from HFCLK (LFSYNT)\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\n32.768 kHz crystal oscillator (LFXO)\nCopy of LFCLKSRC register, set when LFCLKSTART task was …\nRegister <code>LFCLKSRCCOPY</code> reader\n0: 32.768 kHz RC oscillator (LFRC)\nClock source\nField <code>SRC</code> reader - Clock source\n2: 32.768 kHz synthesized from HFCLK (LFSYNT)\n1: 32.768 kHz crystal oscillator (LFXO)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>RC</code>\nChecks if the value of the field is <code>SYNTH</code>\nChecks if the value of the field is <code>XTAL</code>\nBits 0:1 - Clock source\nGet enumerated values variant\nLFCLK status\n0: LFCLK not running\nRegister <code>LFCLKSTAT</code> reader\n0: 32.768 kHz RC oscillator (LFRC)\n1: LFCLK running\nSource of LFCLK\nField <code>SRC</code> reader - Source of LFCLK\nLFCLK state\nField <code>STATE</code> reader - LFCLK state\n2: 32.768 kHz synthesized from HFCLK (LFSYNT)\n1: 32.768 kHz crystal oscillator (LFXO)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>NOT_RUNNING</code>\nChecks if the value of the field is <code>RC</code>\nChecks if the value of the field is <code>RUNNING</code>\nChecks if the value of the field is <code>SYNTH</code>\nChecks if the value of the field is <code>XTAL</code>\nBits 0:1 - Source of LFCLK\nBit 16 - LFCLK state\nGet enumerated values variant\nGet enumerated values variant\n1: 16384 32.768 kHz periods, or 0.5 s. Recommended for …\nLFXO debounce time.\nField <code>LFXODEBOUNCE</code> reader - LFXO debounce time.\nLFXO debounce time. The LFXO is started by triggering the …\nField <code>LFXODEBOUNCE</code> writer - LFXO debounce time.\n0: 8192 32.768 kHz periods, or 0.25 s. Recommended for …\nRegister <code>LFXODEBOUNCE</code> reader\nRegister <code>LFXODEBOUNCE</code> writer\nWrites raw bits to the register.\n16384 32.768 kHz periods, or 0.5 s. Recommended for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>EXTENDED</code>\nChecks if the value of the field is <code>NORMAL</code>\nBit 0 - LFXO debounce time.\nBit 0 - LFXO debounce time.\n8192 32.768 kHz periods, or 0.25 s. Recommended for normal …\nGet enumerated values variant\nStart calibration of LFRC\nStart calibration of LFRC\nField <code>TASKS_CAL</code> writer - Start calibration of LFRC\n1: Trigger task\nRegister <code>TASKS_CAL</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Start calibration of LFRC\nTrigger task\nStart calibration timer\nStart calibration timer\nField <code>TASKS_CTSTART</code> writer - Start calibration timer\n1: Trigger task\nRegister <code>TASKS_CTSTART</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Start calibration timer\nTrigger task\nStop calibration timer\nStop calibration timer\nField <code>TASKS_CTSTOP</code> writer - Stop calibration timer\n1: Trigger task\nRegister <code>TASKS_CTSTOP</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Stop calibration timer\nTrigger task\nStart HFXO crystal oscillator\nStart HFXO crystal oscillator\nField <code>TASKS_HFCLKSTART</code> writer - Start HFXO crystal …\n1: Trigger task\nRegister <code>TASKS_HFCLKSTART</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Start HFXO crystal oscillator\nTrigger task\nStop HFXO crystal oscillator\nStop HFXO crystal oscillator\nField <code>TASKS_HFCLKSTOP</code> writer - Stop HFXO crystal oscillator\n1: Trigger task\nRegister <code>TASKS_HFCLKSTOP</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Stop HFXO crystal oscillator\nTrigger task\nStart LFCLK\nStart LFCLK\nField <code>TASKS_LFCLKSTART</code> writer - Start LFCLK\n1: Trigger task\nRegister <code>TASKS_LFCLKSTART</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Start LFCLK\nTrigger task\nStop LFCLK\nStop LFCLK\nField <code>TASKS_LFCLKSTOP</code> writer - Stop LFCLK\n1: Trigger task\nRegister <code>TASKS_LFCLKSTOP</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Stop LFCLK\nTrigger task\n0: No trace signals routed to pins. All pins can be used …\n2: All trace signals (TRACECLK and TRACEDATA[n]) routed to …\nRegister <code>TRACECONFIG</code> reader\n1: SWO trace signal routed to pin. Remaining pins can be …\nClocking options for the trace port debug interface\nPin multiplexing of trace signals. See pin assignment …\nField <code>TRACEMUX</code> reader - Pin multiplexing of trace signals. …\nField <code>TRACEMUX</code> writer - Pin multiplexing of trace signals. …\nSpeed of trace port clock. Note that the TRACECLK pin will …\nField <code>TRACEPORTSPEED</code> reader - Speed of trace port clock. …\nField <code>TRACEPORTSPEED</code> writer - Speed of trace port clock. …\nRegister <code>TRACECONFIG</code> writer\n1: 16 MHz trace port clock (TRACECLK = 8 MHz)\n16 MHz trace port clock (TRACECLK = 8 MHz)\n0: 32 MHz trace port clock (TRACECLK = 16 MHz)\n32 MHz trace port clock (TRACECLK = 16 MHz)\n3: 4 MHz trace port clock (TRACECLK = 2 MHz)\n4 MHz trace port clock (TRACECLK = 2 MHz)\n2: 8 MHz trace port clock (TRACECLK = 4 MHz)\n8 MHz trace port clock (TRACECLK = 4 MHz)\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNo trace signals routed to pins. All pins can be used as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>_16MHZ</code>\nChecks if the value of the field is <code>_32MHZ</code>\nChecks if the value of the field is <code>_4MHZ</code>\nChecks if the value of the field is <code>_8MHZ</code>\nChecks if the value of the field is <code>GPIO</code>\nChecks if the value of the field is <code>PARALLEL</code>\nChecks if the value of the field is <code>SERIAL</code>\nAll trace signals (TRACECLK and TRACEDATA[n]) routed to …\nSWO trace signal routed to pin. Remaining pins can be used …\nBits 16:17 - Pin multiplexing of trace signals. See pin …\nBits 16:17 - Pin multiplexing of trace signals. See pin …\nBits 0:1 - Speed of trace port clock. Note that the …\nBits 0:1 - Speed of trace port clock. Note that the …\nGet enumerated values variant\nGet enumerated values variant\nENABLE (rw) register accessor: an alias for …\nEVENTS_CROSS (rw) register accessor: an alias for …\nEVENTS_DOWN (rw) register accessor: an alias for …\nEVENTS_READY (rw) register accessor: an alias for …\nEVENTS_UP (rw) register accessor: an alias for …\nEXTREFSEL (rw) register accessor: an alias for …\nHYST (rw) register accessor: an alias for <code>Reg&lt;HYST_SPEC&gt;</code>\nINTEN (rw) register accessor: an alias for <code>Reg&lt;INTEN_SPEC&gt;</code>\nINTENCLR (rw) register accessor: an alias for …\nINTENSET (rw) register accessor: an alias for …\nMODE (rw) register accessor: an alias for <code>Reg&lt;MODE_SPEC&gt;</code>\nPSEL (rw) register accessor: an alias for <code>Reg&lt;PSEL_SPEC&gt;</code>\nREFSEL (rw) register accessor: an alias for …\nRESULT (r) register accessor: an alias for <code>Reg&lt;RESULT_SPEC&gt;</code>\nRegister block\nSHORTS (rw) register accessor: an alias for …\nTASKS_SAMPLE (w) register accessor: an alias for …\nTASKS_START (w) register accessor: an alias for …\nTASKS_STOP (w) register accessor: an alias for …\nTH (rw) register accessor: an alias for <code>Reg&lt;TH_SPEC&gt;</code>\nCOMP enable\n0x500 - COMP enable\nDownward or upward crossing\n0x10c - Downward or upward crossing\nDownward crossing\n0x104 - Downward crossing\nCOMP is ready and output is valid\n0x100 - COMP is ready and output is valid\nUpward crossing\n0x108 - Upward crossing\nExternal reference select\n0x50c - External reference select\nReturns the argument unchanged.\nComparator hysteresis enable\n0x538 - Comparator hysteresis enable\nEnable or disable interrupt\n0x300 - Enable or disable interrupt\nDisable interrupt\n0x308 - Disable interrupt\nEnable interrupt\n0x304 - Enable interrupt\nCalls <code>U::from(self)</code>.\nMode configuration\n0x534 - Mode configuration\nPin select\n0x504 - Pin select\nReference source select for single-ended mode\n0x508 - Reference source select for single-ended mode\nCompare result\n0x400 - Compare result\nShortcuts between local events and tasks\n0x200 - Shortcuts between local events and tasks\nSample comparator value\n0x08 - Sample comparator value\nStart comparator\n0x00 - Start comparator\nStop comparator\n0x04 - Stop comparator\nThreshold configuration for hysteresis unit\n0x530 - Threshold configuration for hysteresis unit\n0: Disable\n2: Enable\nEnable or disable COMP\nField <code>ENABLE</code> reader - Enable or disable COMP\nCOMP enable\nField <code>ENABLE</code> writer - Enable or disable COMP\nRegister <code>ENABLE</code> reader\nRegister <code>ENABLE</code> writer\nWrites raw bits to the register.\nDisable\nBits 0:1 - Enable or disable COMP\nBits 0:1 - Enable or disable COMP\nEnable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\nDownward or upward crossing\nField <code>EVENTS_CROSS</code> reader - Downward or upward crossing\nDownward or upward crossing\nField <code>EVENTS_CROSS</code> writer - Downward or upward crossing\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_CROSS</code> reader\nRegister <code>EVENTS_CROSS</code> writer\nWrites raw bits to the register.\nBit 0 - Downward or upward crossing\nBit 0 - Downward or upward crossing\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nDownward crossing\nField <code>EVENTS_DOWN</code> reader - Downward crossing\nDownward crossing\nField <code>EVENTS_DOWN</code> writer - Downward crossing\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_DOWN</code> reader\nRegister <code>EVENTS_DOWN</code> writer\nWrites raw bits to the register.\nBit 0 - Downward crossing\nBit 0 - Downward crossing\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nCOMP is ready and output is valid\nField <code>EVENTS_READY</code> reader - COMP is ready and output is …\nCOMP is ready and output is valid\nField <code>EVENTS_READY</code> writer - COMP is ready and output is …\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_READY</code> reader\nRegister <code>EVENTS_READY</code> writer\nWrites raw bits to the register.\nBit 0 - COMP is ready and output is valid\nBit 0 - COMP is ready and output is valid\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nUpward crossing\nField <code>EVENTS_UP</code> reader - Upward crossing\nUpward crossing\nField <code>EVENTS_UP</code> writer - Upward crossing\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_UP</code> reader\nRegister <code>EVENTS_UP</code> writer\nWrites raw bits to the register.\nBit 0 - Upward crossing\nBit 0 - Upward crossing\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\n0: Use AIN0 as external analog reference\n1: Use AIN1 as external analog reference\n2: Use AIN2 as external analog reference\n3: Use AIN3 as external analog reference\n4: Use AIN4 as external analog reference\n5: Use AIN5 as external analog reference\n6: Use AIN6 as external analog reference\n7: Use AIN7 as external analog reference\nExternal analog reference select\nField <code>EXTREFSEL</code> reader - External analog reference select\nExternal reference select\nField <code>EXTREFSEL</code> writer - External analog reference select\nRegister <code>EXTREFSEL</code> reader\nRegister <code>EXTREFSEL</code> writer\nUse AIN0 as external analog reference\nUse AIN1 as external analog reference\nUse AIN2 as external analog reference\nUse AIN3 as external analog reference\nUse AIN4 as external analog reference\nUse AIN5 as external analog reference\nUse AIN6 as external analog reference\nUse AIN7 as external analog reference\nWrites raw bits to the register.\nBits 0:2 - External analog reference select\nBits 0:2 - External analog reference select\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>ANALOG_REFERENCE0</code>\nChecks if the value of the field is <code>ANALOG_REFERENCE1</code>\nChecks if the value of the field is <code>ANALOG_REFERENCE2</code>\nChecks if the value of the field is <code>ANALOG_REFERENCE3</code>\nChecks if the value of the field is <code>ANALOG_REFERENCE4</code>\nChecks if the value of the field is <code>ANALOG_REFERENCE5</code>\nChecks if the value of the field is <code>ANALOG_REFERENCE6</code>\nChecks if the value of the field is <code>ANALOG_REFERENCE7</code>\nGet enumerated values variant\n1: Comparator hysteresis enabled\nComparator hysteresis\nField <code>HYST</code> reader - Comparator hysteresis\nComparator hysteresis enable\nField <code>HYST</code> writer - Comparator hysteresis\n0: Comparator hysteresis disabled\nRegister <code>HYST</code> reader\nRegister <code>HYST</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBit 0 - Comparator hysteresis\nBit 0 - Comparator hysteresis\nComparator hysteresis enabled\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>HYST50M_V</code>\nChecks if the value of the field is <code>NO_HYST</code>\nComparator hysteresis disabled\nGet enumerated values variant\nEnable or disable interrupt for event CROSS\nField <code>CROSS</code> reader - Enable or disable interrupt for event …\nField <code>CROSS</code> writer - Enable or disable interrupt for event …\n0: Disable\n0: Disable\n0: Disable\n0: Disable\nEnable or disable interrupt for event DOWN\nField <code>DOWN</code> reader - Enable or disable interrupt for event …\nField <code>DOWN</code> writer - Enable or disable interrupt for event …\n1: Enable\n1: Enable\n1: Enable\n1: Enable\nEnable or disable interrupt\nRegister <code>INTEN</code> reader\nEnable or disable interrupt for event READY\nField <code>READY</code> reader - Enable or disable interrupt for event …\nField <code>READY</code> writer - Enable or disable interrupt for event …\nEnable or disable interrupt for event UP\nField <code>UP</code> reader - Enable or disable interrupt for event UP\nField <code>UP</code> writer - Enable or disable interrupt for event UP\nRegister <code>INTEN</code> writer\nWrites raw bits to the register.\nBit 3 - Enable or disable interrupt for event CROSS\nBit 3 - Enable or disable interrupt for event CROSS\nDisable\nDisable\nDisable\nDisable\nBit 1 - Enable or disable interrupt for event DOWN\nBit 1 - Enable or disable interrupt for event DOWN\nEnable\nEnable\nEnable\nEnable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 0 - Enable or disable interrupt for event READY\nBit 0 - Enable or disable interrupt for event READY\nBit 2 - Enable or disable interrupt for event UP\nBit 2 - Enable or disable interrupt for event UP\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\n1: Disable\n1: Disable\n1: Disable\n1: Disable\nWrite ‘1’ to disable interrupt for event CROSS\nWrite ‘1’ to disable interrupt for event CROSS\nField <code>CROSS</code> reader - Write ‘1’ to disable interrupt …\nField <code>CROSS</code> writer - Write ‘1’ to disable interrupt …\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\nWrite ‘1’ to disable interrupt for event DOWN\nWrite ‘1’ to disable interrupt for event DOWN\nField <code>DOWN</code> reader - Write ‘1’ to disable interrupt for …\nField <code>DOWN</code> writer - Write ‘1’ to disable interrupt for …\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nDisable interrupt\nRegister <code>INTENCLR</code> reader\nWrite ‘1’ to disable interrupt for event READY\nWrite ‘1’ to disable interrupt for event READY\nField <code>READY</code> reader - Write ‘1’ to disable interrupt …\nField <code>READY</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for event UP\nWrite ‘1’ to disable interrupt for event UP\nField <code>UP</code> reader - Write ‘1’ to disable interrupt for …\nField <code>UP</code> writer - Write ‘1’ to disable interrupt for …\nRegister <code>INTENCLR</code> writer\nWrites raw bits to the register.\nDisable\nDisable\nDisable\nDisable\nBit 3 - Write ‘1’ to disable interrupt for event CROSS\nBit 3 - Write ‘1’ to disable interrupt for event CROSS\nBit 1 - Write ‘1’ to disable interrupt for event DOWN\nBit 1 - Write ‘1’ to disable interrupt for event DOWN\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 0 - Write ‘1’ to disable interrupt for event READY\nBit 0 - Write ‘1’ to disable interrupt for event READY\nBit 2 - Write ‘1’ to disable interrupt for event UP\nBit 2 - Write ‘1’ to disable interrupt for event UP\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nWrite ‘1’ to enable interrupt for event CROSS\nWrite ‘1’ to enable interrupt for event CROSS\nField <code>CROSS</code> reader - Write ‘1’ to enable interrupt for …\nField <code>CROSS</code> writer - Write ‘1’ to enable interrupt for …\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\n0: Read: Disabled\nWrite ‘1’ to enable interrupt for event DOWN\nWrite ‘1’ to enable interrupt for event DOWN\nField <code>DOWN</code> reader - Write ‘1’ to enable interrupt for …\nField <code>DOWN</code> writer - Write ‘1’ to enable interrupt for …\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\n1: Read: Enabled\nEnable interrupt\nRegister <code>INTENSET</code> reader\nWrite ‘1’ to enable interrupt for event READY\nWrite ‘1’ to enable interrupt for event READY\nField <code>READY</code> reader - Write ‘1’ to enable interrupt for …\nField <code>READY</code> writer - Write ‘1’ to enable interrupt for …\n1: Enable\n1: Enable\n1: Enable\n1: Enable\nWrite ‘1’ to enable interrupt for event UP\nWrite ‘1’ to enable interrupt for event UP\nField <code>UP</code> reader - Write ‘1’ to enable interrupt for …\nField <code>UP</code> writer - Write ‘1’ to enable interrupt for …\nRegister <code>INTENSET</code> writer\nWrites raw bits to the register.\nBit 3 - Write ‘1’ to enable interrupt for event CROSS\nBit 3 - Write ‘1’ to enable interrupt for event CROSS\nBit 1 - Write ‘1’ to enable interrupt for event DOWN\nBit 1 - Write ‘1’ to enable interrupt for event DOWN\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 0 - Write ‘1’ to enable interrupt for event READY\nBit 0 - Write ‘1’ to enable interrupt for event READY\nEnable\nEnable\nEnable\nEnable\nBit 2 - Write ‘1’ to enable interrupt for event UP\nBit 2 - Write ‘1’ to enable interrupt for event UP\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\n1: Differential mode\n2: High-speed mode\n0: Low-power mode\nMain operation modes\nField <code>MAIN</code> reader - Main operation modes\nField <code>MAIN</code> writer - Main operation modes\nMode configuration\n1: Normal mode\nRegister <code>MODE</code> reader\n0: Single-ended mode\nSpeed and power modes\nField <code>SP</code> reader - Speed and power modes\nField <code>SP</code> writer - Speed and power modes\nRegister <code>MODE</code> writer\nWrites raw bits to the register.\nDifferential mode\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHigh-speed mode\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DIFF</code>\nChecks if the value of the field is <code>HIGH</code>\nChecks if the value of the field is <code>LOW</code>\nChecks if the value of the field is <code>NORMAL</code>\nChecks if the value of the field is <code>SE</code>\nLow-power mode\nBit 8 - Main operation modes\nBit 8 - Main operation modes\nNormal mode\nSingle-ended mode\nBits 0:1 - Speed and power modes\nBits 0:1 - Speed and power modes\nGet enumerated values variant\nGet enumerated values variant\n0: AIN0 selected as analog input\n1: AIN1 selected as analog input\n2: AIN2 selected as analog input\n3: AIN3 selected as analog input\n4: AIN4 selected as analog input\n5: AIN5 selected as analog input\n6: AIN6 selected as analog input\n7: AIN7 selected as analog input\nAnalog pin select\nField <code>PSEL</code> reader - Analog pin select\nPin select\nField <code>PSEL</code> writer - Analog pin select\nRegister <code>PSEL</code> reader\nRegister <code>PSEL</code> writer\nAIN0 selected as analog input\nAIN1 selected as analog input\nAIN2 selected as analog input\nAIN3 selected as analog input\nAIN4 selected as analog input\nAIN5 selected as analog input\nAIN6 selected as analog input\nAIN7 selected as analog input\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>ANALOG_INPUT0</code>\nChecks if the value of the field is <code>ANALOG_INPUT1</code>\nChecks if the value of the field is <code>ANALOG_INPUT2</code>\nChecks if the value of the field is <code>ANALOG_INPUT3</code>\nChecks if the value of the field is <code>ANALOG_INPUT4</code>\nChecks if the value of the field is <code>ANALOG_INPUT5</code>\nChecks if the value of the field is <code>ANALOG_INPUT6</code>\nChecks if the value of the field is <code>ANALOG_INPUT7</code>\nBits 0:2 - Analog pin select\nBits 0:2 - Analog pin select\nGet enumerated values variant\n5: VREF = AREF\n0: VREF = internal 1.2 V reference (VDD &gt;= 1.7 V)\n1: VREF = internal 1.8 V reference (VDD &gt;= VREF + 0.2 V)\n2: VREF = internal 2.4 V reference (VDD &gt;= VREF + 0.2 V)\nRegister <code>REFSEL</code> reader\nReference select\nField <code>REFSEL</code> reader - Reference select\nReference source select for single-ended mode\nField <code>REFSEL</code> writer - Reference select\n4: VREF = VDD\nRegister <code>REFSEL</code> writer\nVREF = AREF\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nVREF = internal 1.2 V reference (VDD &gt;= 1.7 V)\nVREF = internal 1.8 V reference (VDD &gt;= VREF + 0.2 V)\nVREF = internal 2.4 V reference (VDD &gt;= VREF + 0.2 V)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>AREF</code>\nChecks if the value of the field is <code>INT1V2</code>\nChecks if the value of the field is <code>INT1V8</code>\nChecks if the value of the field is <code>INT2V4</code>\nChecks if the value of the field is <code>VDD</code>\nBits 0:2 - Reference select\nBits 0:2 - Reference select\nGet enumerated values variant\nVREF = VDD\n1: Input voltage is above the threshold (VIN+ &gt; VIN-)\n0: Input voltage is below the threshold (VIN+ &lt; VIN-)\nRegister <code>RESULT</code> reader\nResult of last compare. Decision point SAMPLE task.\nField <code>RESULT</code> reader - Result of last compare. Decision …\nCompare result\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>ABOVE</code>\nChecks if the value of the field is <code>BELOW</code>\nBit 0 - Result of last compare. Decision point SAMPLE task.\nGet enumerated values variant\nShortcut between event CROSS and task STOP\nField <code>CROSS_STOP</code> reader - Shortcut between event CROSS and …\nField <code>CROSS_STOP</code> writer - Shortcut between event CROSS and …\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\n0: Disable shortcut\nShortcut between event DOWN and task STOP\nField <code>DOWN_STOP</code> reader - Shortcut between event DOWN and …\nField <code>DOWN_STOP</code> writer - Shortcut between event DOWN and …\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\n1: Enable shortcut\nRegister <code>SHORTS</code> reader\nShortcut between event READY and task SAMPLE\nField <code>READY_SAMPLE</code> reader - Shortcut between event READY …\nField <code>READY_SAMPLE</code> writer - Shortcut between event READY …\nShortcut between event READY and task STOP\nField <code>READY_STOP</code> reader - Shortcut between event READY and …\nField <code>READY_STOP</code> writer - Shortcut between event READY and …\nShortcuts between local events and tasks\nShortcut between event UP and task STOP\nField <code>UP_STOP</code> reader - Shortcut between event UP and task …\nField <code>UP_STOP</code> writer - Shortcut between event UP and task …\nRegister <code>SHORTS</code> writer\nWrites raw bits to the register.\nBit 4 - Shortcut between event CROSS and task STOP\nBit 4 - Shortcut between event CROSS and task STOP\nDisable shortcut\nDisable shortcut\nDisable shortcut\nDisable shortcut\nDisable shortcut\nBit 2 - Shortcut between event DOWN and task STOP\nBit 2 - Shortcut between event DOWN and task STOP\nEnable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nEnable shortcut\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nBit 0 - Shortcut between event READY and task SAMPLE\nBit 0 - Shortcut between event READY and task SAMPLE\nBit 1 - Shortcut between event READY and task STOP\nBit 1 - Shortcut between event READY and task STOP\nBit 3 - Shortcut between event UP and task STOP\nBit 3 - Shortcut between event UP and task STOP\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nGet enumerated values variant\nSample comparator value\nSample comparator value\nField <code>TASKS_SAMPLE</code> writer - Sample comparator value\n1: Trigger task\nRegister <code>TASKS_SAMPLE</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Sample comparator value\nTrigger task\nStart comparator\nStart comparator\nField <code>TASKS_START</code> writer - Start comparator\n1: Trigger task\nRegister <code>TASKS_START</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Start comparator\nTrigger task\nStop comparator\nStop comparator\nField <code>TASKS_STOP</code> writer - Stop comparator\n1: Trigger task\nRegister <code>TASKS_STOP</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Stop comparator\nTrigger task\nRegister <code>TH</code> reader\nField <code>THDOWN</code> reader - VDOWN = (THDOWN+1)/64*VREF\nField <code>THDOWN</code> writer - VDOWN = (THDOWN+1)/64*VREF\nField <code>THUP</code> reader - VUP = (THUP+1)/64*VREF\nField <code>THUP</code> writer - VUP = (THUP+1)/64*VREF\nThreshold configuration for hysteresis unit\nRegister <code>TH</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBits 0:5 - VDOWN = (THDOWN+1)/64*VREF\nBits 0:5 - VDOWN = (THDOWN+1)/64*VREF\nBits 8:13 - VUP = (THUP+1)/64*VREF\nBits 8:13 - VUP = (THUP+1)/64*VREF\nECBDATAPTR (rw) register accessor: an alias for …\nEVENTS_ENDECB (rw) register accessor: an alias for …\nEVENTS_ERRORECB (rw) register accessor: an alias for …\nINTENCLR (rw) register accessor: an alias for …\nINTENSET (rw) register accessor: an alias for …\nRegister block\nTASKS_STARTECB (w) register accessor: an alias for …\nTASKS_STOPECB (w) register accessor: an alias for …\nECB block encrypt memory pointers\n0x504 - ECB block encrypt memory pointers\nECB block encrypt complete\n0x100 - ECB block encrypt complete\nECB block encrypt aborted because of a STOPECB task or due …\n0x104 - ECB block encrypt aborted because of a STOPECB …\nReturns the argument unchanged.\nDisable interrupt\n0x308 - Disable interrupt\nEnable interrupt\n0x304 - Enable interrupt\nCalls <code>U::from(self)</code>.\nStart ECB block encrypt\n0x00 - Start ECB block encrypt\nAbort a possible executing ECB operation\n0x04 - Abort a possible executing ECB operation\nField <code>ECBDATAPTR</code> reader - Pointer to the ECB data …\nECB block encrypt memory pointers\nField <code>ECBDATAPTR</code> writer - Pointer to the ECB data …\nRegister <code>ECBDATAPTR</code> reader\nRegister <code>ECBDATAPTR</code> writer\nWrites raw bits to the register.\nBits 0:31 - Pointer to the ECB data structure (see Table 1 …\nBits 0:31 - Pointer to the ECB data structure (see Table 1 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nECB block encrypt complete\nField <code>EVENTS_ENDECB</code> reader - ECB block encrypt complete\nECB block encrypt complete\nField <code>EVENTS_ENDECB</code> writer - ECB block encrypt complete\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_ENDECB</code> reader\nRegister <code>EVENTS_ENDECB</code> writer\nWrites raw bits to the register.\nBit 0 - ECB block encrypt complete\nBit 0 - ECB block encrypt complete\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\nECB block encrypt aborted because of a STOPECB task or due …\nField <code>EVENTS_ERRORECB</code> reader - ECB block encrypt aborted …\nECB block encrypt aborted because of a STOPECB task or due …\nField <code>EVENTS_ERRORECB</code> writer - ECB block encrypt aborted …\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_ERRORECB</code> reader\nRegister <code>EVENTS_ERRORECB</code> writer\nWrites raw bits to the register.\nBit 0 - ECB block encrypt aborted because of a STOPECB …\nBit 0 - ECB block encrypt aborted because of a STOPECB …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\n1: Disable\n1: Disable\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\nWrite ‘1’ to disable interrupt for event ENDECB\nWrite ‘1’ to disable interrupt for event ENDECB\nField <code>ENDECB</code> reader - Write ‘1’ to disable interrupt …\nField <code>ENDECB</code> writer - Write ‘1’ to disable interrupt …\nWrite ‘1’ to disable interrupt for event ERRORECB\nWrite ‘1’ to disable interrupt for event ERRORECB\nField <code>ERRORECB</code> reader - Write ‘1’ to disable interrupt …\nField <code>ERRORECB</code> writer - Write ‘1’ to disable interrupt …\nDisable interrupt\nRegister <code>INTENCLR</code> reader\nRegister <code>INTENCLR</code> writer\nWrites raw bits to the register.\nDisable\nDisable\nBit 0 - Write ‘1’ to disable interrupt for event ENDECB\nBit 0 - Write ‘1’ to disable interrupt for event ENDECB\nBit 1 - Write ‘1’ to disable interrupt for event …\nBit 1 - Write ‘1’ to disable interrupt for event …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nGet enumerated values variant\nGet enumerated values variant\n0: Read: Disabled\n0: Read: Disabled\n1: Read: Enabled\n1: Read: Enabled\nWrite ‘1’ to enable interrupt for event ENDECB\nWrite ‘1’ to enable interrupt for event ENDECB\nField <code>ENDECB</code> reader - Write ‘1’ to enable interrupt …\nField <code>ENDECB</code> writer - Write ‘1’ to enable interrupt …\nWrite ‘1’ to enable interrupt for event ERRORECB\nWrite ‘1’ to enable interrupt for event ERRORECB\nField <code>ERRORECB</code> reader - Write ‘1’ to enable interrupt …\nField <code>ERRORECB</code> writer - Write ‘1’ to enable interrupt …\nEnable interrupt\nRegister <code>INTENSET</code> reader\n1: Enable\n1: Enable\nRegister <code>INTENSET</code> writer\nWrites raw bits to the register.\nBit 0 - Write ‘1’ to enable interrupt for event ENDECB\nBit 0 - Write ‘1’ to enable interrupt for event ENDECB\nBit 1 - Write ‘1’ to enable interrupt for event …\nBit 1 - Write ‘1’ to enable interrupt for event …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>DISABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nChecks if the value of the field is <code>ENABLED</code>\nEnable\nEnable\nGet enumerated values variant\nGet enumerated values variant\nStart ECB block encrypt\nStart ECB block encrypt\nField <code>TASKS_STARTECB</code> writer - Start ECB block encrypt\n1: Trigger task\nRegister <code>TASKS_STARTECB</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Start ECB block encrypt\nTrigger task\nAbort a possible executing ECB operation\nAbort a possible executing ECB operation\nField <code>TASKS_STOPECB</code> writer - Abort a possible executing …\n1: Trigger task\nRegister <code>TASKS_STOPECB</code> writer\nWrites raw bits to the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit 0 - Abort a possible executing ECB operation\nTrigger task\nEVENTS_TRIGGERED (rw) register accessor: an alias for …\nINTEN (rw) register accessor: an alias for <code>Reg&lt;INTEN_SPEC&gt;</code>\nINTENCLR (rw) register accessor: an alias for …\nINTENSET (rw) register accessor: an alias for …\nRegister block\nTASKS_TRIGGER (w) register accessor: an alias for …\nDescription collection: Event number n generated by …\n0x100..0x140 - Description collection: Event number n …\nReturns the argument unchanged.\nEnable or disable interrupt\n0x300 - Enable or disable interrupt\nDisable interrupt\n0x308 - Disable interrupt\nEnable interrupt\n0x304 - Enable interrupt\nCalls <code>U::from(self)</code>.\nDescription collection: Trigger n for triggering the …\n0x00..0x40 - Description collection: Trigger n for …\nEvent number n generated by triggering the corresponding …\nField <code>EVENTS_TRIGGERED</code> reader - Event number n generated …\nDescription collection: Event number n generated by …\nField <code>EVENTS_TRIGGERED</code> writer - Event number n generated …\n1: Event generated\n0: Event not generated\nRegister <code>EVENTS_TRIGGERED[%s]</code> reader\nRegister <code>EVENTS_TRIGGERED[%s]</code> writer\nWrites raw bits to the register.\nBit 0 - Event number n generated by triggering the …\nBit 0 - Event number n generated by triggering the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent generated\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the value of the field is <code>GENERATED</code>\nChecks if the value of the field is <code>NOT_GENERATED</code>\nEvent not generated\nGet enumerated values variant\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n0: Disable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\n1: Enable\nEnable or disable interrupt\nRegister <code>INTEN</code> reader\nEnable or disable interrupt for event TRIGGERED[0]\nField <code>TRIGGERED0</code> reader - Enable or disable interrupt for …\nField <code>TRIGGERED0</code> writer - Enable or disable interrupt for …\nEnable or disable interrupt for event TRIGGERED[10]\nField <code>TRIGGERED10</code> reader - Enable or disable interrupt for …\nField <code>TRIGGERED10</code> writer - Enable or disable interrupt for …\nEnable or disable interrupt for event TRIGGERED[11]\nField <code>TRIGGERED11</code> reader - Enable or disable interrupt for …\nField <code>TRIGGERED11</code> writer - Enable or disable interrupt for …\nEnable or disable interrupt for event TRIGGERED[12]\nField <code>TRIGGERED12</code> reader - Enable or disable interrupt for …\nField <code>TRIGGERED12</code> writer - Enable or disable interrupt for …\nEnable or disable interrupt for event TRIGGERED[13]\nField <code>TRIGGERED13</code> reader - Enable or disable interrupt for …\nField <code>TRIGGERED13</code> writer - Enable or disable interrupt for …\nEnable or disable interrupt for event TRIGGERED[14]\nField <code>TRIGGERED14</code> reader - Enable or disable interrupt for …\nField <code>TRIGGERED14</code> writer - Enable or disable interrupt for …\nEnable or disable interrupt for event TRIGGERED[15]\nField <code>TRIGGERED15</code> reader - Enable or disable interrupt for …")