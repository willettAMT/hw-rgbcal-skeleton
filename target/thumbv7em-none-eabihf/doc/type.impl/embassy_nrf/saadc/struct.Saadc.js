(function() {
    var type_impls = Object.fromEntries([["mb2_embassy_rgb",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Saadc%3C'd,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/embassy_nrf/saadc.rs.html#481\">Source</a><a href=\"#impl-Drop-for-Saadc%3C'd,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'d, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"embassy_nrf/saadc/struct.Saadc.html\" title=\"struct embassy_nrf::saadc::Saadc\">Saadc</a>&lt;'d, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/embassy_nrf/saadc.rs.html#482\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","mb2_embassy_rgb::knob::Adc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Saadc%3C'd,+1%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/embassy_nrf/saadc.rs.html#458\">Source</a><a href=\"#impl-Saadc%3C'd,+1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'d&gt; <a class=\"struct\" href=\"embassy_nrf/saadc/struct.Saadc.html\" title=\"struct embassy_nrf::saadc::Saadc\">Saadc</a>&lt;'d, 1&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.run_timer_sampler\" class=\"method\"><a class=\"src rightside\" href=\"src/embassy_nrf/saadc.rs.html#469-475\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"embassy_nrf/saadc/struct.Saadc.html#tymethod.run_timer_sampler\" class=\"fn\">run_timer_sampler</a>&lt;I, S, const N0: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n    bufs: &amp;mut [[[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.i16.html\">i16</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.array.html\">1</a>]; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.array.html\">N0</a>]; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.array.html\">2</a>],\n    sample_rate_divisor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.u16.html\">u16</a>,\n    sampler: S,\n)<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;[[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.i16.html\">i16</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.array.html\">1</a>]]) -&gt; <a class=\"enum\" href=\"embassy_nrf/saadc/enum.CallbackResult.html\" title=\"enum embassy_nrf::saadc::CallbackResult\">CallbackResult</a>,</div></h4></section></summary><div class=\"docblock\"><p>Continuous sampling on a single channel with double buffers.</p>\n<p>The internal clock is to be used with a sample rate expressed as a divisor of\n16MHz, ranging from 80..2047. For example, 1600 represents a sample rate of 10KHz\ngiven 16_000_000 / 10_000_000 = 1600.</p>\n<p>A sampler closure is provided that receives the buffer of samples, noting\nthat the size of this buffer can be less than the original buffer’s size.\nA command is return from the closure that indicates whether the sampling\nshould continue or stop.</p>\n</div></details></div></details>",0,"mb2_embassy_rgb::knob::Adc"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Saadc%3C'd,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/embassy_nrf/saadc.rs.html#143\">Source</a><a href=\"#impl-Saadc%3C'd,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'d, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"embassy_nrf/saadc/struct.Saadc.html\" title=\"struct embassy_nrf::saadc::Saadc\">Saadc</a>&lt;'d, N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/embassy_nrf/saadc.rs.html#145-150\">Source</a><h4 class=\"code-header\">pub fn <a href=\"embassy_nrf/saadc/struct.Saadc.html#tymethod.new\" class=\"fn\">new</a>(\n    saadc: impl <a class=\"trait\" href=\"embassy_hal_internal/peripheral/trait.Peripheral.html\" title=\"trait embassy_hal_internal::peripheral::Peripheral\">Peripheral</a>&lt;P = <a class=\"struct\" href=\"embassy_nrf/chip/peripherals/struct.SAADC.html\" title=\"struct embassy_nrf::chip::peripherals::SAADC\">SAADC</a>&gt; + 'd,\n    _irq: impl <a class=\"trait\" href=\"embassy_nrf/chip/interrupt/typelevel/trait.Binding.html\" title=\"trait embassy_nrf::chip::interrupt::typelevel::Binding\">Binding</a>&lt;<a class=\"enum\" href=\"embassy_nrf/chip/interrupt/typelevel/enum.SAADC.html\" title=\"enum embassy_nrf::chip::interrupt::typelevel::SAADC\">SAADC</a>, <a class=\"struct\" href=\"embassy_nrf/saadc/struct.InterruptHandler.html\" title=\"struct embassy_nrf::saadc::InterruptHandler\">InterruptHandler</a>&gt; + 'd,\n    config: <a class=\"struct\" href=\"embassy_nrf/saadc/struct.Config.html\" title=\"struct embassy_nrf::saadc::Config\">Config</a>,\n    channel_configs: [<a class=\"struct\" href=\"embassy_nrf/saadc/struct.ChannelConfig.html\" title=\"struct embassy_nrf::saadc::ChannelConfig\">ChannelConfig</a>&lt;'_&gt;; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.array.html\">N</a>],\n) -&gt; <a class=\"struct\" href=\"embassy_nrf/saadc/struct.Saadc.html\" title=\"struct embassy_nrf::saadc::Saadc\">Saadc</a>&lt;'d, N&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new SAADC driver.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.calibrate\" class=\"method\"><a class=\"src rightside\" href=\"src/embassy_nrf/saadc.rs.html#203\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"embassy_nrf/saadc/struct.Saadc.html#tymethod.calibrate\" class=\"fn\">calibrate</a>(&amp;self)</h4></section></summary><div class=\"docblock\"><p>Perform SAADC calibration. Completes when done.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sample\" class=\"method\"><a class=\"src rightside\" href=\"src/embassy_nrf/saadc.rs.html#235\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"embassy_nrf/saadc/struct.Saadc.html#tymethod.sample\" class=\"fn\">sample</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.i16.html\">i16</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.array.html\">N</a>])</h4></section></summary><div class=\"docblock\"><p>One shot sampling. The buffer must be the same size as the number of channels configured.\nThe sampling is stopped prior to returning in order to reduce power consumption (power\nconsumption remains higher if sampling is not stopped explicitly). Cancellation will\nalso cause the sampling to be stopped.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.run_task_sampler\" class=\"method\"><a class=\"src rightside\" href=\"src/embassy_nrf/saadc.rs.html#297-307\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"embassy_nrf/saadc/struct.Saadc.html#tymethod.run_task_sampler\" class=\"fn\">run_task_sampler</a>&lt;F, T, const N0: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n    timer: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.reference.html\">&amp;mut T</a>,\n    ppi_ch1: &amp;mut impl <a class=\"trait\" href=\"embassy_nrf/ppi/trait.ConfigurableChannel.html\" title=\"trait embassy_nrf::ppi::ConfigurableChannel\">ConfigurableChannel</a>,\n    ppi_ch2: &amp;mut impl <a class=\"trait\" href=\"embassy_nrf/ppi/trait.ConfigurableChannel.html\" title=\"trait embassy_nrf::ppi::ConfigurableChannel\">ConfigurableChannel</a>,\n    frequency: <a class=\"enum\" href=\"embassy_nrf/timer/enum.Frequency.html\" title=\"enum embassy_nrf::timer::Frequency\">Frequency</a>,\n    sample_counter: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.u32.html\">u32</a>,\n    bufs: &amp;mut [[[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.i16.html\">i16</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.array.html\">N</a>]; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.array.html\">N0</a>]; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.array.html\">2</a>],\n    callback: F,\n)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"embassy_nrf/timer/trait.Instance.html\" title=\"trait embassy_nrf::timer::Instance\">Instance</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;[[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.i16.html\">i16</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/core/primitive.array.html\">N</a>]]) -&gt; <a class=\"enum\" href=\"embassy_nrf/saadc/enum.CallbackResult.html\" title=\"enum embassy_nrf::saadc::CallbackResult\">CallbackResult</a>,</div></h4></section></summary><div class=\"docblock\"><p>Continuous sampling with double buffers.</p>\n<p>A TIMER and two PPI peripherals are passed in so that precise sampling\ncan be attained. The sampling interval is expressed by selecting a\ntimer clock frequency to use along with a counter threshold to be reached.\nFor example, 1KHz can be achieved using a frequency of 1MHz and a counter\nthreshold of 1000.</p>\n<p>A sampler closure is provided that receives the buffer of samples, noting\nthat the size of this buffer can be less than the original buffer’s size.\nA command is return from the closure that indicates whether the sampling\nshould continue or stop.</p>\n<p>NOTE: The time spent within the callback supplied should not exceed the time\ntaken to acquire the samples into a single buffer. You should measure the\ntime taken by the callback and set the sample buffer size accordingly.\nExceeding this time can lead to samples becoming dropped.</p>\n<p>The sampling is stopped prior to returning in order to reduce power consumption (power\nconsumption remains higher if sampling is not stopped explicitly), and to\nfree the buffers from being used by the peripheral. Cancellation will\nalso cause the sampling to be stopped.</p>\n</div></details></div></details>",0,"mb2_embassy_rgb::knob::Adc"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[11514]}