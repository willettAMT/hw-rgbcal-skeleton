(function() {
    var implementors = Object.fromEntries([["embassy_embedded_hal",[["impl&lt;'a, M, BUS&gt; <a class=\"trait\" href=\"embedded_hal/i2c/trait.ErrorType.html\" title=\"trait embedded_hal::i2c::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"embassy_embedded_hal/shared_bus/asynch/i2c/struct.I2cDeviceWithConfig.html\" title=\"struct embassy_embedded_hal::shared_bus::asynch::i2c::I2cDeviceWithConfig\">I2cDeviceWithConfig</a>&lt;'a, M, BUS&gt;<div class=\"where\">where\n    BUS: <a class=\"trait\" href=\"embedded_hal/i2c/trait.ErrorType.html\" title=\"trait embedded_hal::i2c::ErrorType\">ErrorType</a> + <a class=\"trait\" href=\"embassy_embedded_hal/trait.SetConfig.html\" title=\"trait embassy_embedded_hal::SetConfig\">SetConfig</a>,\n    M: <a class=\"trait\" href=\"embassy_sync/blocking_mutex/raw/trait.RawMutex.html\" title=\"trait embassy_sync::blocking_mutex::raw::RawMutex\">RawMutex</a>,</div>"],["impl&lt;'a, M, BUS&gt; <a class=\"trait\" href=\"embedded_hal/i2c/trait.ErrorType.html\" title=\"trait embedded_hal::i2c::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"embassy_embedded_hal/shared_bus/blocking/i2c/struct.I2cDeviceWithConfig.html\" title=\"struct embassy_embedded_hal::shared_bus::blocking::i2c::I2cDeviceWithConfig\">I2cDeviceWithConfig</a>&lt;'a, M, BUS&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"embassy_sync/blocking_mutex/raw/trait.RawMutex.html\" title=\"trait embassy_sync::blocking_mutex::raw::RawMutex\">RawMutex</a>,\n    BUS: <a class=\"trait\" href=\"embedded_hal/i2c/trait.ErrorType.html\" title=\"trait embedded_hal::i2c::ErrorType\">ErrorType</a> + <a class=\"trait\" href=\"embassy_embedded_hal/trait.SetConfig.html\" title=\"trait embassy_embedded_hal::SetConfig\">SetConfig</a>,</div>"],["impl&lt;'a, M: <a class=\"trait\" href=\"embassy_sync/blocking_mutex/raw/trait.RawMutex.html\" title=\"trait embassy_sync::blocking_mutex::raw::RawMutex\">RawMutex</a>, BUS&gt; <a class=\"trait\" href=\"embedded_hal/i2c/trait.ErrorType.html\" title=\"trait embedded_hal::i2c::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"embassy_embedded_hal/shared_bus/asynch/i2c/struct.I2cDevice.html\" title=\"struct embassy_embedded_hal::shared_bus::asynch::i2c::I2cDevice\">I2cDevice</a>&lt;'a, M, BUS&gt;<div class=\"where\">where\n    BUS: <a class=\"trait\" href=\"embedded_hal/i2c/trait.ErrorType.html\" title=\"trait embedded_hal::i2c::ErrorType\">ErrorType</a>,</div>"],["impl&lt;'a, M: <a class=\"trait\" href=\"embassy_sync/blocking_mutex/raw/trait.RawMutex.html\" title=\"trait embassy_sync::blocking_mutex::raw::RawMutex\">RawMutex</a>, BUS&gt; <a class=\"trait\" href=\"embedded_hal/i2c/trait.ErrorType.html\" title=\"trait embedded_hal::i2c::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"embassy_embedded_hal/shared_bus/blocking/i2c/struct.I2cDevice.html\" title=\"struct embassy_embedded_hal::shared_bus::blocking::i2c::I2cDevice\">I2cDevice</a>&lt;'a, M, BUS&gt;<div class=\"where\">where\n    BUS: <a class=\"trait\" href=\"embedded_hal/i2c/trait.ErrorType.html\" title=\"trait embedded_hal::i2c::ErrorType\">ErrorType</a>,</div>"],["impl&lt;T&gt; <a class=\"trait\" href=\"embedded_hal/i2c/trait.ErrorType.html\" title=\"trait embedded_hal::i2c::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"embassy_embedded_hal/adapter/struct.YieldingAsync.html\" title=\"struct embassy_embedded_hal::adapter::YieldingAsync\">YieldingAsync</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"embedded_hal/i2c/trait.ErrorType.html\" title=\"trait embedded_hal::i2c::ErrorType\">ErrorType</a>,</div>"],["impl&lt;T, E&gt; <a class=\"trait\" href=\"embedded_hal/i2c/trait.ErrorType.html\" title=\"trait embedded_hal::i2c::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"embassy_embedded_hal/adapter/struct.BlockingAsync.html\" title=\"struct embassy_embedded_hal::adapter::BlockingAsync\">BlockingAsync</a>&lt;T&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"embedded_hal/i2c/trait.Error.html\" title=\"trait embedded_hal::i2c::Error\">Error</a> + 'static,\n    T: <a class=\"trait\" href=\"embedded_hal/blocking/i2c/trait.WriteRead.html\" title=\"trait embedded_hal::blocking::i2c::WriteRead\">WriteRead</a>&lt;Error = E&gt; + <a class=\"trait\" href=\"embedded_hal/blocking/i2c/trait.Read.html\" title=\"trait embedded_hal::blocking::i2c::Read\">Read</a>&lt;Error = E&gt; + <a class=\"trait\" href=\"embedded_hal/blocking/i2c/trait.Write.html\" title=\"trait embedded_hal::blocking::i2c::Write\">Write</a>&lt;Error = E&gt;,</div>"]]],["embassy_nrf",[["impl&lt;'d, T: <a class=\"trait\" href=\"embassy_nrf/twim/trait.Instance.html\" title=\"trait embassy_nrf::twim::Instance\">Instance</a>&gt; <a class=\"trait\" href=\"embedded_hal/i2c/trait.ErrorType.html\" title=\"trait embedded_hal::i2c::ErrorType\">ErrorType</a> for <a class=\"struct\" href=\"embassy_nrf/twim/struct.Twim.html\" title=\"struct embassy_nrf::twim::Twim\">Twim</a>&lt;'d, T&gt;"]]],["embedded_hal",[]],["embedded_hal_async",[]]]);
    if (window.register_implementors) {
        window.register_implementors(implementors);
    } else {
        window.pending_implementors = implementors;
    }
})()
//{"start":57,"fragment_lengths":[4532,418,20,26]}